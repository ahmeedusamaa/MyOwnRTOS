
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001034  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001164  08001164  00011164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001190  08001190  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001190  08001190  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001190  08001190  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001190  08001190  00011190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001194  08001194  00011194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  20000004  0800119c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  0800119c  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c11  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f9a  00000000  00000000  00025c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001300  00000000  00000000  00026bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000300  00000000  00000000  00027ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000288  00000000  00000000  000281d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002e5a  00000000  00000000  00028460  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000314a  00000000  00000000  0002b2ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00014596  00000000  00000000  0002e404  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0004299a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009fc  00000000  00000000  00042a18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	0800114c 	.word	0x0800114c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	0800114c 	.word	0x0800114c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	88fb      	ldrh	r3, [r7, #6]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
 */

#include "CortexMX_OS_porting.h"

void HardFault_Handler()
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0

}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr

08000228 <MemManage_Handler>:
void MemManage_Handler()
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0

}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <BusFault_Handler>:
void BusFault_Handler()
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0

}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr

08000240 <UsageFault_Handler>:
void UsageFault_Handler()
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0

}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <trigger_OS_PendSV>:

void trigger_OS_PendSV()
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <trigger_OS_PendSV+0x18>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <trigger_OS_PendSV+0x18>)
 8000256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800025a:	6053      	str	r3, [r2, #4]

}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <SysTick_Handler>:

unsigned char SysTickLed;
void SysTick_Handler()
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	SysTickLed ^= 1;
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <SysTick_Handler+0x24>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	f083 0301 	eor.w	r3, r3, #1
 8000274:	b2da      	uxtb	r2, r3
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <SysTick_Handler+0x24>)
 8000278:	701a      	strb	r2, [r3, #0]

	RTOS_Update_TaskWaitingTime();
 800027a:	f000 fc15 	bl	8000aa8 <RTOS_Update_TaskWaitingTime>

	//Decide what next
	Decide_whatNext();
 800027e:	f000 fa51 	bl	8000724 <Decide_whatNext>

	//trigger OS_PendSV (Switch context/Restore)
	trigger_OS_PendSV();
 8000282:	f7ff ffe3 	bl	800024c <trigger_OS_PendSV>
}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	2000003c 	.word	0x2000003c

08000290 <SVC_Handler>:

__attribute ((naked))void SVC_Handler()
{
	__asm("tst lr, #4 \n\t"
 8000290:	f01e 0f04 	tst.w	lr, #4
 8000294:	bf0c      	ite	eq
 8000296:	f3ef 8008 	mrseq	r0, MSP
 800029a:	f3ef 8009 	mrsne	r0, PSP
 800029e:	f000 bb6b 	b.w	8000978 <OS_SVC>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC");
}
 80002a2:	bf00      	nop

080002a4 <Hardware_init>:

void Hardware_init()
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	//RCC Default values makes CPU Clock & SysTick Timer clock = 8 MHZ
	//Initializes the System Timer and its interrupt, and starts the System Tick Timer.


	// decrease PendSV interrupt priority to be smaller than or equal SysTick Timer
	__NVIC_SetPriority(PendSV_IRQn, 15);
 80002a8:	210f      	movs	r1, #15
 80002aa:	f06f 0001 	mvn.w	r0, #1
 80002ae:	f7ff ff69 	bl	8000184 <__NVIC_SetPriority>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <Start_Systick>:

void Start_Systick()
{
 80002b6:	b580      	push	{r7, lr}
 80002b8:	af00      	add	r7, sp, #0
	/* 8 MHZ
	  * 1 count -> 0.125 us
	  * X count -> 1 ms
	  * X = 8000 count
	  */
	SysTick_Config(8000);
 80002ba:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80002be:	f7ff ff8b 	bl	80001d8 <SysTick_Config>

}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <FIFO_init>:
 */


#include"MYRTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 80002c6:	b480      	push	{r7}
 80002c8:	b085      	sub	sp, #20
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	60f8      	str	r0, [r7, #12]
 80002ce:	60b9      	str	r1, [r7, #8]
 80002d0:	607a      	str	r2, [r7, #4]

	if(!buff )
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d101      	bne.n	80002dc <FIFO_init+0x16>
		return FIFO_NULL;
 80002d8:	2303      	movs	r3, #3
 80002da:	e011      	b.n	8000300 <FIFO_init+0x3a>

	fifo->base = buff ;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	68da      	ldr	r2, [r3, #12]
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	68da      	ldr	r2, [r3, #12]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80002fe:	2300      	movs	r3, #0

}
 8000300:	4618      	mov	r0, r3
 8000302:	3714      	adds	r7, #20
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr

0800030a <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 800030a:	b480      	push	{r7}
 800030c:	b083      	sub	sp, #12
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
 8000312:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d003      	beq.n	8000324 <FIFO_enqueue+0x1a>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	691b      	ldr	r3, [r3, #16]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d101      	bne.n	8000328 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 8000324:	2303      	movs	r3, #3
 8000326:	e02d      	b.n	8000384 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	685a      	ldr	r2, [r3, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	429a      	cmp	r2, r3
 8000332:	d107      	bne.n	8000344 <FIFO_enqueue+0x3a>
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	429a      	cmp	r2, r3
 800033e:	d101      	bne.n	8000344 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 8000340:	2301      	movs	r3, #1
 8000342:	e01f      	b.n	8000384 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	683a      	ldr	r2, [r7, #0]
 800034a:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	1c5a      	adds	r2, r3, #1
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	68d2      	ldr	r2, [r2, #12]
 800035e:	4611      	mov	r1, r2
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	6912      	ldr	r2, [r2, #16]
 8000364:	0092      	lsls	r2, r2, #2
 8000366:	440a      	add	r2, r1
 8000368:	3a04      	subs	r2, #4
 800036a:	4293      	cmp	r3, r2
 800036c:	d104      	bne.n	8000378 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	68da      	ldr	r2, [r3, #12]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	e004      	b.n	8000382 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	1d1a      	adds	r2, r3, #4
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8000382:	2300      	movs	r3, #0


}
 8000384:	4618      	mov	r0, r3
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr

0800038e <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 800038e:	b480      	push	{r7}
 8000390:	b083      	sub	sp, #12
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d003      	beq.n	80003a8 <FIFO_dequeue+0x1a>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d101      	bne.n	80003ac <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 80003a8:	2303      	movs	r3, #3
 80003aa:	e028      	b.n	80003fe <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	685a      	ldr	r2, [r3, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d101      	bne.n	80003bc <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80003b8:	2302      	movs	r3, #2
 80003ba:	e020      	b.n	80003fe <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	1e5a      	subs	r2, r3, #1
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	68d2      	ldr	r2, [r2, #12]
 80003d8:	4611      	mov	r1, r2
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	6912      	ldr	r2, [r2, #16]
 80003de:	0092      	lsls	r2, r2, #2
 80003e0:	440a      	add	r2, r1
 80003e2:	3a04      	subs	r2, #4
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d104      	bne.n	80003f2 <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	68da      	ldr	r2, [r3, #12]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	e004      	b.n	80003fc <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	1d1a      	adds	r2, r3, #4
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <Idle_Task>:
	OS_Modes OSModes;
}OS_Control;

unsigned char IdleTaskLed;
void Idle_Task()
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
	while(1)
	{
		IdleTaskLed ^= 1;
 800040c:	4b04      	ldr	r3, [pc, #16]	; (8000420 <Idle_Task+0x18>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	f083 0301 	eor.w	r3, r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b02      	ldr	r3, [pc, #8]	; (8000420 <Idle_Task+0x18>)
 8000418:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 800041a:	bf20      	wfe
		IdleTaskLed ^= 1;
 800041c:	e7f6      	b.n	800040c <Idle_Task+0x4>
 800041e:	bf00      	nop
 8000420:	20000200 	.word	0x20000200

08000424 <RTOS_Create_MainStack>:
	}
}

RTOS_errorID RTOS_Create_MainStack()
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
	RTOS_errorID error = NOError;
 800042a:	2300      	movs	r3, #0
 800042c:	71fb      	strb	r3, [r7, #7]

	// 3 KiloByte for MSP
	OS_Control._S_MSP = &_estack ;
 800042e:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <RTOS_Create_MainStack+0x3c>)
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <RTOS_Create_MainStack+0x40>)
 8000432:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP = OS_Control._S_MSP - MainStackSize;
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <RTOS_Create_MainStack+0x40>)
 8000438:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800043c:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000440:	4a08      	ldr	r2, [pc, #32]	; (8000464 <RTOS_Create_MainStack+0x40>)
 8000442:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_Control.PSP_TaskLocator = (OS_Control._E_MSP - 8);
 8000446:	4b07      	ldr	r3, [pc, #28]	; (8000464 <RTOS_Create_MainStack+0x40>)
 8000448:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800044c:	3b08      	subs	r3, #8
 800044e:	4a05      	ldr	r2, [pc, #20]	; (8000464 <RTOS_Create_MainStack+0x40>)
 8000450:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	return error;
 8000454:	79fb      	ldrb	r3, [r7, #7]

}
 8000456:	4618      	mov	r0, r3
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	20002800 	.word	0x20002800
 8000464:	20000040 	.word	0x20000040

08000468 <RTOS_init>:

RTOS_errorID RTOS_init()
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
	RTOS_errorID error = NOError;
 800046e:	2300      	movs	r3, #0
 8000470:	71fb      	strb	r3, [r7, #7]

	//Update OS mode
	OS_Control.OSModes = OSSuspended;
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <RTOS_init+0x68>)
 8000474:	2200      	movs	r2, #0
 8000476:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the MAIN stack for OS
	RTOS_Create_MainStack();
 800047a:	f7ff ffd3 	bl	8000424 <RTOS_Create_MainStack>

	//Create OS ready Queue
	if (FIFO_init(&Ready_QUEUE, Ready_QUEUE_FIFO, 100) !=FIFO_NO_ERROR)
 800047e:	2264      	movs	r2, #100	; 0x64
 8000480:	4914      	ldr	r1, [pc, #80]	; (80004d4 <RTOS_init+0x6c>)
 8000482:	4815      	ldr	r0, [pc, #84]	; (80004d8 <RTOS_init+0x70>)
 8000484:	f7ff ff1f 	bl	80002c6 <FIFO_init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d002      	beq.n	8000494 <RTOS_init+0x2c>
	{
		error += Ready_Queue_init_error ;
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	3301      	adds	r3, #1
 8000492:	71fb      	strb	r3, [r7, #7]
	}

	//Configure IDLE TASK
	strcpy(RTOS_IdleTask.Task_name, "idleTask");
 8000494:	4a11      	ldr	r2, [pc, #68]	; (80004dc <RTOS_init+0x74>)
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <RTOS_init+0x78>)
 8000498:	cb03      	ldmia	r3!, {r0, r1}
 800049a:	6010      	str	r0, [r2, #0]
 800049c:	6051      	str	r1, [r2, #4]
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	7213      	strb	r3, [r2, #8]
	RTOS_IdleTask.Priority = 255;                	//lowest Priority (unsigned char -> 255)
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <RTOS_init+0x7c>)
 80004a4:	22ff      	movs	r2, #255	; 0xff
 80004a6:	711a      	strb	r2, [r3, #4]
	RTOS_IdleTask.P_TaskEntery = Idle_Task;
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <RTOS_init+0x7c>)
 80004aa:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <RTOS_init+0x80>)
 80004ac:	609a      	str	r2, [r3, #8]
	RTOS_IdleTask.Stack_Size = 300;
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <RTOS_init+0x7c>)
 80004b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004b4:	601a      	str	r2, [r3, #0]

	error += RTOS_CreateTask(&RTOS_IdleTask);
 80004b6:	480b      	ldr	r0, [pc, #44]	; (80004e4 <RTOS_init+0x7c>)
 80004b8:	f000 f85a 	bl	8000570 <RTOS_CreateTask>
 80004bc:	4603      	mov	r3, r0
 80004be:	461a      	mov	r2, r3
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	4413      	add	r3, r2
 80004c4:	71fb      	strb	r3, [r7, #7]

	return error;
 80004c6:	79fb      	ldrb	r3, [r7, #7]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000040 	.word	0x20000040
 80004d4:	20000244 	.word	0x20000244
 80004d8:	200001ec 	.word	0x200001ec
 80004dc:	2000021d 	.word	0x2000021d
 80004e0:	08001164 	.word	0x08001164
 80004e4:	20000204 	.word	0x20000204
 80004e8:	08000409 	.word	0x08000409

080004ec <RTOS_Create_TaskStack>:

RTOS_errorID RTOS_Create_TaskStack(Task_ref* T_ref)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	RTOS_errorID error = NOError;
 80004f4:	2300      	movs	r3, #0
 80004f6:	72fb      	strb	r3, [r7, #11]
	 *====
	 *will push and pop manually the addition frame to save the other general purpose registers:
	 *r5, r6 , r7 ,r8 ,r9, r10,r11 (Saved/Restore)Manual
	 */

	T_ref->Current_PSP = T_ref->_S_PSP_Task;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	615a      	str	r2, [r3, #20]

	//DUMMY_XPSR should T =1
	T_ref->Current_PSP--;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	1f1a      	subs	r2, r3, #4
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	615a      	str	r2, [r3, #20]
	*(T_ref->Current_PSP) = 0x1000000;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000514:	601a      	str	r2, [r3, #0]

	//PC
	T_ref->Current_PSP--;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	1f1a      	subs	r2, r3, #4
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	615a      	str	r2, [r3, #20]
	*(T_ref->Current_PSP) =  (unsigned int)T_ref->P_TaskEntery;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689a      	ldr	r2, [r3, #8]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	601a      	str	r2, [r3, #0]

	//LR
	T_ref->Current_PSP--;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	1f1a      	subs	r2, r3, #4
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	615a      	str	r2, [r3, #20]
	//LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
	*(T_ref->Current_PSP) = 0xFFFFFFFD;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	f06f 0202 	mvn.w	r2, #2
 800053c:	601a      	str	r2, [r3, #0]

	int i;
	for(i=0 ; i<13 ; i++ )
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e00b      	b.n	800055c <RTOS_Create_TaskStack+0x70>
	{
		//rx
		T_ref->Current_PSP--;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	1f1a      	subs	r2, r3, #4
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	615a      	str	r2, [r3, #20]
		*(T_ref->Current_PSP) = 0;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
	for(i=0 ; i<13 ; i++ )
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	3301      	adds	r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	2b0c      	cmp	r3, #12
 8000560:	ddf0      	ble.n	8000544 <RTOS_Create_TaskStack+0x58>
	}

	return error;
 8000562:	7afb      	ldrb	r3, [r7, #11]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
	...

08000570 <RTOS_CreateTask>:

RTOS_errorID RTOS_CreateTask(Task_ref* T_ref)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	RTOS_errorID error = NOError;
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]

	//create Its own PSP stack
	//check task stack size exceeded the PSP stack
	T_ref->_S_PSP_Task =  OS_Control.PSP_TaskLocator;
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <RTOS_CreateTask+0x68>)
 800057e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	60da      	str	r2, [r3, #12]
	T_ref->_E_PSP_Task = ( OS_Control.PSP_TaskLocator - T_ref->Stack_Size );
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <RTOS_CreateTask+0x68>)
 8000588:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	1ad2      	subs	r2, r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	611a      	str	r2, [r3, #16]
	{
		//return Task_exceeded_StackSize;
	}

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_TaskLocator =  (T_ref->_E_PSP_Task - 8);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	3b08      	subs	r3, #8
 800059c:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <RTOS_CreateTask+0x68>)
 800059e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	RTOS_Create_TaskStack(T_ref);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff ffa2 	bl	80004ec <RTOS_Create_TaskStack>

	//update sch Table
	OS_Control.OS_Tasks[OS_Control.NumberOfCreatedTask] = T_ref;
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <RTOS_CreateTask+0x68>)
 80005aa:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80005ae:	4619      	mov	r1, r3
 80005b0:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <RTOS_CreateTask+0x68>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	OS_Control.NumberOfCreatedTask++;
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <RTOS_CreateTask+0x68>)
 80005ba:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80005be:	3301      	adds	r3, #1
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <RTOS_CreateTask+0x68>)
 80005c4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	//Task state Update suspend
	T_ref->Task_State = Suspended;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]

	return error;
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000040 	.word	0x20000040

080005dc <BubbleSort_SchedulerTable>:

void BubbleSort_SchedulerTable()
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
	Task_ref* Temp;
	int i,j;
	for(i=0; i< (OS_Control.NumberOfCreatedTask - 1); i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e032      	b.n	800064e <BubbleSort_SchedulerTable+0x72>
		for(j=0; j< (OS_Control.NumberOfCreatedTask - 1 -i); j++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	e023      	b.n	8000636 <BubbleSort_SchedulerTable+0x5a>
		{
			if(OS_Control.OS_Tasks[j]->Priority > OS_Control.OS_Tasks[j+1]->Priority)
 80005ee:	4a1e      	ldr	r2, [pc, #120]	; (8000668 <BubbleSort_SchedulerTable+0x8c>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f6:	791a      	ldrb	r2, [r3, #4]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	3301      	adds	r3, #1
 80005fc:	491a      	ldr	r1, [pc, #104]	; (8000668 <BubbleSort_SchedulerTable+0x8c>)
 80005fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	d913      	bls.n	8000630 <BubbleSort_SchedulerTable+0x54>
			{
				Temp = OS_Control.OS_Tasks[j];
 8000608:	4a17      	ldr	r2, [pc, #92]	; (8000668 <BubbleSort_SchedulerTable+0x8c>)
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000610:	607b      	str	r3, [r7, #4]
				OS_Control.OS_Tasks[j]  = OS_Control.OS_Tasks[j+1];
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	3301      	adds	r3, #1
 8000616:	4a14      	ldr	r2, [pc, #80]	; (8000668 <BubbleSort_SchedulerTable+0x8c>)
 8000618:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800061c:	4912      	ldr	r1, [pc, #72]	; (8000668 <BubbleSort_SchedulerTable+0x8c>)
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OS_Tasks[j+1]  = Temp;
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	3301      	adds	r3, #1
 8000628:	490f      	ldr	r1, [pc, #60]	; (8000668 <BubbleSort_SchedulerTable+0x8c>)
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0; j< (OS_Control.NumberOfCreatedTask - 1 -i); j++)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	3301      	adds	r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <BubbleSort_SchedulerTable+0x8c>)
 8000638:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	429a      	cmp	r2, r3
 8000646:	dbd2      	blt.n	80005ee <BubbleSort_SchedulerTable+0x12>
	for(i=0; i< (OS_Control.NumberOfCreatedTask - 1); i++)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3301      	adds	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <BubbleSort_SchedulerTable+0x8c>)
 8000650:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000654:	3b01      	subs	r3, #1
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbc5      	blt.n	80005e8 <BubbleSort_SchedulerTable+0xc>
			}
		}

}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000040 	.word	0x20000040

0800066c <RTOS_Update_SchedulerTable>:

//Handler mode
void RTOS_Update_SchedulerTable()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
	BubbleSort_SchedulerTable();
 8000672:	f7ff ffb3 	bl	80005dc <BubbleSort_SchedulerTable>

	Task_ref* Temp = NULL;
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
	//Free Ready Queue
	while(FIFO_dequeue(&Ready_QUEUE, &Temp)!=FIFO_EMPTY);
 800067a:	bf00      	nop
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	4826      	ldr	r0, [pc, #152]	; (800071c <RTOS_Update_SchedulerTable+0xb0>)
 8000682:	f7ff fe84 	bl	800038e <FIFO_dequeue>
 8000686:	4603      	mov	r3, r0
 8000688:	2b02      	cmp	r3, #2
 800068a:	d1f7      	bne.n	800067c <RTOS_Update_SchedulerTable+0x10>

	//Update Ready Queue
	Task_ref* Ptask;
	Task_ref* PnextTask;
	int i=0;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
	while(i<OS_Control.NumberOfCreatedTask)
 8000690:	e038      	b.n	8000704 <RTOS_Update_SchedulerTable+0x98>
	{
		Ptask = OS_Control.OS_Tasks[i];
 8000692:	4a23      	ldr	r2, [pc, #140]	; (8000720 <RTOS_Update_SchedulerTable+0xb4>)
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069a:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OS_Tasks[i+1];
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a1f      	ldr	r2, [pc, #124]	; (8000720 <RTOS_Update_SchedulerTable+0xb4>)
 80006a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a6:	607b      	str	r3, [r7, #4]
		if(Ptask->Task_State != Suspended)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	7e1b      	ldrb	r3, [r3, #24]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d026      	beq.n	80006fe <RTOS_Update_SchedulerTable+0x92>
		{
			if(PnextTask->Task_State == Suspended)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7e1b      	ldrb	r3, [r3, #24]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d107      	bne.n	80006c8 <RTOS_Update_SchedulerTable+0x5c>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80006b8:	68b9      	ldr	r1, [r7, #8]
 80006ba:	4818      	ldr	r0, [pc, #96]	; (800071c <RTOS_Update_SchedulerTable+0xb0>)
 80006bc:	f7ff fe25 	bl	800030a <FIFO_enqueue>
				Ptask->Task_State=Ready;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	2201      	movs	r2, #1
 80006c4:	761a      	strb	r2, [r3, #24]
				break;
 80006c6:	e024      	b.n	8000712 <RTOS_Update_SchedulerTable+0xa6>
			}
			if(Ptask->Priority < PnextTask->Priority )
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	791a      	ldrb	r2, [r3, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	791b      	ldrb	r3, [r3, #4]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d207      	bcs.n	80006e4 <RTOS_Update_SchedulerTable+0x78>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80006d4:	68b9      	ldr	r1, [r7, #8]
 80006d6:	4811      	ldr	r0, [pc, #68]	; (800071c <RTOS_Update_SchedulerTable+0xb0>)
 80006d8:	f7ff fe17 	bl	800030a <FIFO_enqueue>
				Ptask->Task_State=Ready;
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	2201      	movs	r2, #1
 80006e0:	761a      	strb	r2, [r3, #24]
				break;
 80006e2:	e016      	b.n	8000712 <RTOS_Update_SchedulerTable+0xa6>
			}else if(Ptask->Priority == PnextTask->Priority )
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	791a      	ldrb	r2, [r3, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d106      	bne.n	80006fe <RTOS_Update_SchedulerTable+0x92>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80006f0:	68b9      	ldr	r1, [r7, #8]
 80006f2:	480a      	ldr	r0, [pc, #40]	; (800071c <RTOS_Update_SchedulerTable+0xb0>)
 80006f4:	f7ff fe09 	bl	800030a <FIFO_enqueue>
				Ptask->Task_State=Ready;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2201      	movs	r2, #1
 80006fc:	761a      	strb	r2, [r3, #24]
			}
		}
		i++;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
	while(i<OS_Control.NumberOfCreatedTask)
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <RTOS_Update_SchedulerTable+0xb4>)
 8000706:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800070a:	461a      	mov	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4293      	cmp	r3, r2
 8000710:	dbbf      	blt.n	8000692 <RTOS_Update_SchedulerTable+0x26>
	}
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200001ec 	.word	0x200001ec
 8000720:	20000040 	.word	0x20000040

08000724 <Decide_whatNext>:
	TaskWaitingTime
}SVC_ID;


void Decide_whatNext()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	if(Ready_QUEUE.counter == 0 && OS_Control.Current_Task->Task_State != Suspended)
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <Decide_whatNext+0x84>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d118      	bne.n	8000762 <Decide_whatNext+0x3e>
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <Decide_whatNext+0x88>)
 8000732:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000736:	7e1b      	ldrb	r3, [r3, #24]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d012      	beq.n	8000762 <Decide_whatNext+0x3e>
	{
		OS_Control.Current_Task->Task_State = Running;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <Decide_whatNext+0x88>)
 800073e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000742:	2203      	movs	r2, #3
 8000744:	761a      	strb	r2, [r3, #24]
		FIFO_enqueue(&Ready_QUEUE, OS_Control.Current_Task);
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <Decide_whatNext+0x88>)
 8000748:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800074c:	4619      	mov	r1, r3
 800074e:	4816      	ldr	r0, [pc, #88]	; (80007a8 <Decide_whatNext+0x84>)
 8000750:	f7ff fddb 	bl	800030a <FIFO_enqueue>

		/* This line is crucial for the next step, as it determines which task's
		 * information will be saved and which task will later restore its context.
		 */
		OS_Control.Next_Task = OS_Control.Current_Task;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <Decide_whatNext+0x88>)
 8000756:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <Decide_whatNext+0x88>)
 800075c:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&Ready_QUEUE, OS_Control.Current_Task);
			OS_Control.Current_Task->Task_State = Ready;
		}
	}
}
 8000760:	e01f      	b.n	80007a2 <Decide_whatNext+0x7e>
		FIFO_dequeue(&Ready_QUEUE, &OS_Control.Next_Task);
 8000762:	4913      	ldr	r1, [pc, #76]	; (80007b0 <Decide_whatNext+0x8c>)
 8000764:	4810      	ldr	r0, [pc, #64]	; (80007a8 <Decide_whatNext+0x84>)
 8000766:	f7ff fe12 	bl	800038e <FIFO_dequeue>
		if((OS_Control.Current_Task->Priority == OS_Control.Next_Task->Priority ) && ( OS_Control.Current_Task->Task_State != Suspended))
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <Decide_whatNext+0x88>)
 800076c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000770:	791a      	ldrb	r2, [r3, #4]
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <Decide_whatNext+0x88>)
 8000774:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	429a      	cmp	r2, r3
 800077c:	d111      	bne.n	80007a2 <Decide_whatNext+0x7e>
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <Decide_whatNext+0x88>)
 8000780:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000784:	7e1b      	ldrb	r3, [r3, #24]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d00b      	beq.n	80007a2 <Decide_whatNext+0x7e>
			FIFO_enqueue(&Ready_QUEUE, OS_Control.Current_Task);
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <Decide_whatNext+0x88>)
 800078c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000790:	4619      	mov	r1, r3
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <Decide_whatNext+0x84>)
 8000794:	f7ff fdb9 	bl	800030a <FIFO_enqueue>
			OS_Control.Current_Task->Task_State = Ready;
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <Decide_whatNext+0x88>)
 800079a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800079e:	2201      	movs	r2, #1
 80007a0:	761a      	strb	r2, [r3, #24]
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001ec 	.word	0x200001ec
 80007ac:	20000040 	.word	0x20000040
 80007b0:	200001e4 	.word	0x200001e4

080007b4 <PendSV_Handler>:

	//==============================================
	/* Get the Current Task "Current PSP"
	 * will save manually the addition frame of other general purpose registers
	 */
	OS_GET_PSP(OS_Control.Current_Task->Current_PSP);        //Current_Task for OS when OS in running mode
 80007b4:	4b6f      	ldr	r3, [pc, #444]	; (8000974 <PendSV_Handler+0x1c0>)
 80007b6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ba:	f3ef 8009 	mrs	r0, PSP
 80007be:	4602      	mov	r2, r0
 80007c0:	615a      	str	r2, [r3, #20]

	OS_Control.Current_Task->Current_PSP--;
 80007c2:	4b6c      	ldr	r3, [pc, #432]	; (8000974 <PendSV_Handler+0x1c0>)
 80007c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	3a04      	subs	r2, #4
 80007cc:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r4 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 80007ce:	4b69      	ldr	r3, [pc, #420]	; (8000974 <PendSV_Handler+0x1c0>)
 80007d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4622      	mov	r2, r4
 80007d8:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 80007da:	4b66      	ldr	r3, [pc, #408]	; (8000974 <PendSV_Handler+0x1c0>)
 80007dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007e0:	695a      	ldr	r2, [r3, #20]
 80007e2:	3a04      	subs	r2, #4
 80007e4:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r5 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 80007e6:	4b63      	ldr	r3, [pc, #396]	; (8000974 <PendSV_Handler+0x1c0>)
 80007e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	462a      	mov	r2, r5
 80007f0:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 80007f2:	4b60      	ldr	r3, [pc, #384]	; (8000974 <PendSV_Handler+0x1c0>)
 80007f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007f8:	695a      	ldr	r2, [r3, #20]
 80007fa:	3a04      	subs	r2, #4
 80007fc:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r6 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 80007fe:	4b5d      	ldr	r3, [pc, #372]	; (8000974 <PendSV_Handler+0x1c0>)
 8000800:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4632      	mov	r2, r6
 8000808:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 800080a:	4b5a      	ldr	r3, [pc, #360]	; (8000974 <PendSV_Handler+0x1c0>)
 800080c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	3a04      	subs	r2, #4
 8000814:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r7 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 8000816:	4b57      	ldr	r3, [pc, #348]	; (8000974 <PendSV_Handler+0x1c0>)
 8000818:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	463a      	mov	r2, r7
 8000820:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 8000822:	4b54      	ldr	r3, [pc, #336]	; (8000974 <PendSV_Handler+0x1c0>)
 8000824:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	3a04      	subs	r2, #4
 800082c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r8 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 800082e:	4b51      	ldr	r3, [pc, #324]	; (8000974 <PendSV_Handler+0x1c0>)
 8000830:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4642      	mov	r2, r8
 8000838:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 800083a:	4b4e      	ldr	r3, [pc, #312]	; (8000974 <PendSV_Handler+0x1c0>)
 800083c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000840:	695a      	ldr	r2, [r3, #20]
 8000842:	3a04      	subs	r2, #4
 8000844:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r9 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 8000846:	4b4b      	ldr	r3, [pc, #300]	; (8000974 <PendSV_Handler+0x1c0>)
 8000848:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	464a      	mov	r2, r9
 8000850:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 8000852:	4b48      	ldr	r3, [pc, #288]	; (8000974 <PendSV_Handler+0x1c0>)
 8000854:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000858:	695a      	ldr	r2, [r3, #20]
 800085a:	3a04      	subs	r2, #4
 800085c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r10 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 800085e:	4b45      	ldr	r3, [pc, #276]	; (8000974 <PendSV_Handler+0x1c0>)
 8000860:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	4652      	mov	r2, sl
 8000868:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 800086a:	4b42      	ldr	r3, [pc, #264]	; (8000974 <PendSV_Handler+0x1c0>)
 800086c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000870:	695a      	ldr	r2, [r3, #20]
 8000872:	3a04      	subs	r2, #4
 8000874:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r11 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 8000876:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <PendSV_Handler+0x1c0>)
 8000878:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	465a      	mov	r2, fp
 8000880:	601a      	str	r2, [r3, #0]
	 * Without it, if the next task is NULL, the context switch operation risks
	 * attempting to restore garbage values, including the Program Counter (PC)
	 * That could lead to unpredictable behavior, , potentially jumping to an
 	 * unknown memory location.
	*/
	if (OS_Control.Next_Task != NULL){
 8000882:	4b3c      	ldr	r3, [pc, #240]	; (8000974 <PendSV_Handler+0x1c0>)
 8000884:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000888:	2b00      	cmp	r3, #0
 800088a:	d009      	beq.n	80008a0 <PendSV_Handler+0xec>
		OS_Control.Current_Task = OS_Control.Next_Task ;
 800088c:	4b39      	ldr	r3, [pc, #228]	; (8000974 <PendSV_Handler+0x1c0>)
 800088e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000892:	4a38      	ldr	r2, [pc, #224]	; (8000974 <PendSV_Handler+0x1c0>)
 8000894:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control.Next_Task = NULL ;
 8000898:	4b36      	ldr	r3, [pc, #216]	; (8000974 <PendSV_Handler+0x1c0>)
 800089a:	2200      	movs	r2, #0
 800089c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	__asm volatile("mov r11, %0" : : "r" (*OS_Control.Current_Task->Current_PSP) );
 80008a0:	4b34      	ldr	r3, [pc, #208]	; (8000974 <PendSV_Handler+0x1c0>)
 80008a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	469b      	mov	fp, r3
	OS_Control.Current_Task->Current_PSP++;
 80008ac:	4b31      	ldr	r3, [pc, #196]	; (8000974 <PendSV_Handler+0x1c0>)
 80008ae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008b2:	695a      	ldr	r2, [r3, #20]
 80008b4:	3204      	adds	r2, #4
 80008b6:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r10, %0" : : "r" (*OS_Control.Current_Task->Current_PSP) );
 80008b8:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <PendSV_Handler+0x1c0>)
 80008ba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	469a      	mov	sl, r3
	OS_Control.Current_Task->Current_PSP++;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <PendSV_Handler+0x1c0>)
 80008c6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ca:	695a      	ldr	r2, [r3, #20]
 80008cc:	3204      	adds	r2, #4
 80008ce:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r9, %0"  : : "r" (*OS_Control.Current_Task->Current_PSP) );
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <PendSV_Handler+0x1c0>)
 80008d2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008d6:	695b      	ldr	r3, [r3, #20]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4699      	mov	r9, r3
	OS_Control.Current_Task->Current_PSP++;
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <PendSV_Handler+0x1c0>)
 80008de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e2:	695a      	ldr	r2, [r3, #20]
 80008e4:	3204      	adds	r2, #4
 80008e6:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r8, %0"  : : "r" (*OS_Control.Current_Task->Current_PSP) );
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <PendSV_Handler+0x1c0>)
 80008ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4698      	mov	r8, r3
	OS_Control.Current_Task->Current_PSP++;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <PendSV_Handler+0x1c0>)
 80008f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008fa:	695a      	ldr	r2, [r3, #20]
 80008fc:	3204      	adds	r2, #4
 80008fe:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r7, %0"  : : "r" (*OS_Control.Current_Task->Current_PSP) );
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <PendSV_Handler+0x1c0>)
 8000902:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	461f      	mov	r7, r3
	OS_Control.Current_Task->Current_PSP++;
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <PendSV_Handler+0x1c0>)
 800090e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	3204      	adds	r2, #4
 8000916:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r6, %0"  : : "r" (*OS_Control.Current_Task->Current_PSP) );
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <PendSV_Handler+0x1c0>)
 800091a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	461e      	mov	r6, r3
	OS_Control.Current_Task->Current_PSP++;
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <PendSV_Handler+0x1c0>)
 8000926:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800092a:	695a      	ldr	r2, [r3, #20]
 800092c:	3204      	adds	r2, #4
 800092e:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r5, %0"  : : "r" (*OS_Control.Current_Task->Current_PSP) );
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <PendSV_Handler+0x1c0>)
 8000932:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	461d      	mov	r5, r3
	OS_Control.Current_Task->Current_PSP++;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <PendSV_Handler+0x1c0>)
 800093e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000942:	695a      	ldr	r2, [r3, #20]
 8000944:	3204      	adds	r2, #4
 8000946:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r4, %0"  : : "r" (*OS_Control.Current_Task->Current_PSP) );
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <PendSV_Handler+0x1c0>)
 800094a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	461c      	mov	r4, r3
	OS_Control.Current_Task->Current_PSP++;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <PendSV_Handler+0x1c0>)
 8000956:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800095a:	695a      	ldr	r2, [r3, #20]
 800095c:	3204      	adds	r2, #4
 800095e:	615a      	str	r2, [r3, #20]
	 * r3
	 * r2
	 * r1
	 * r0
	 */
	OS_SET_PSP(OS_Control.Current_Task->Current_PSP);
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <PendSV_Handler+0x1c0>)
 8000962:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	4618      	mov	r0, r3
 800096a:	f380 8809 	msr	PSP, r0
	/*
	 * __attribute ((naked)) means no stack frame set up by the compiler
	 * manually handle the exit from this Handler
	 * as the compiler will not automatically generate the exit code.
	 */
	__asm volatile("BX LR");
 800096e:	4770      	bx	lr
																}
 8000970:	bf00      	nop
 8000972:	4618      	mov	r0, r3
 8000974:	20000040 	.word	0x20000040

08000978 <OS_SVC>:

//Handler Mode
void OS_SVC(int *StackFramePointer)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	unsigned char SVC_number;
	SVC_number = *( (unsigned char*) ( (unsigned char*)StackFramePointer[6] )-2 ) ;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3318      	adds	r3, #24
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3b02      	subs	r3, #2
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	73fb      	strb	r3, [r7, #15]
	switch(SVC_number)
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	2b00      	cmp	r3, #0
 8000990:	db1f      	blt.n	80009d2 <OS_SVC+0x5a>
 8000992:	2b01      	cmp	r3, #1
 8000994:	dd02      	ble.n	800099c <OS_SVC+0x24>
 8000996:	2b02      	cmp	r3, #2
 8000998:	d017      	beq.n	80009ca <OS_SVC+0x52>
		break;
	case TaskWaitingTime:
		RTOS_Update_SchedulerTable();
		break;
	}
}
 800099a:	e01a      	b.n	80009d2 <OS_SVC+0x5a>
		RTOS_Update_SchedulerTable();
 800099c:	f7ff fe66 	bl	800066c <RTOS_Update_SchedulerTable>
		if (OS_Control.OSModes == OSRunning)
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <OS_SVC+0x64>)
 80009a2:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d112      	bne.n	80009d0 <OS_SVC+0x58>
			if(strcmp(OS_Control.Current_Task->Task_name,"idleTask") != 0)
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <OS_SVC+0x64>)
 80009ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009b0:	3319      	adds	r3, #25
 80009b2:	490b      	ldr	r1, [pc, #44]	; (80009e0 <OS_SVC+0x68>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fbdb 	bl	8000170 <strcmp>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d007      	beq.n	80009d0 <OS_SVC+0x58>
				Decide_whatNext();
 80009c0:	f7ff feb0 	bl	8000724 <Decide_whatNext>
				trigger_OS_PendSV();
 80009c4:	f7ff fc42 	bl	800024c <trigger_OS_PendSV>
		break;
 80009c8:	e002      	b.n	80009d0 <OS_SVC+0x58>
		RTOS_Update_SchedulerTable();
 80009ca:	f7ff fe4f 	bl	800066c <RTOS_Update_SchedulerTable>
		break;
 80009ce:	e000      	b.n	80009d2 <OS_SVC+0x5a>
		break;
 80009d0:	bf00      	nop
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000040 	.word	0x20000040
 80009e0:	08001164 	.word	0x08001164

080009e4 <OS_SVC_Set>:

//Thread Mode
int OS_SVC_Set(SVC_ID ID)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d005      	beq.n	8000a00 <OS_SVC_Set+0x1c>
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d005      	beq.n	8000a04 <OS_SVC_Set+0x20>
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d105      	bne.n	8000a08 <OS_SVC_Set+0x24>
	{
	case ActivateTask:
		__asm("svc #0x00");
 80009fc:	df00      	svc	0
		break;
 80009fe:	e003      	b.n	8000a08 <OS_SVC_Set+0x24>
	case TerminateTask:
		__asm("svc #0x01");
 8000a00:	df01      	svc	1
		break;
 8000a02:	e001      	b.n	8000a08 <OS_SVC_Set+0x24>
	case TaskWaitingTime:
		__asm("svc #0x02");
 8000a04:	df02      	svc	2
		break;
 8000a06:	bf00      	nop
	}
}
 8000a08:	bf00      	nop
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <RTOS_ActivateTask>:


void RTOS_ActivateTask(Task_ref* T_ref)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	T_ref->Task_State = Waiting;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2202      	movs	r2, #2
 8000a20:	761a      	strb	r2, [r3, #24]
	OS_SVC_Set(ActivateTask);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff ffde 	bl	80009e4 <OS_SVC_Set>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <RTOS_TerminalTask>:

void RTOS_TerminalTask(Task_ref* T_ref)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	T_ref->Task_State = Suspended;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	761a      	strb	r2, [r3, #24]
	OS_SVC_Set(TerminateTask);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f7ff ffd0 	bl	80009e4 <OS_SVC_Set>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <RTOS_StartOS>:

void RTOS_StartOS()
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	OS_Control.OSModes = OSRunning;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <RTOS_StartOS+0x54>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set Default Task
	OS_Control.Current_Task = &RTOS_IdleTask;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <RTOS_StartOS+0x54>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <RTOS_StartOS+0x58>)
 8000a5c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	RTOS_ActivateTask(&RTOS_IdleTask);
 8000a60:	4810      	ldr	r0, [pc, #64]	; (8000aa4 <RTOS_StartOS+0x58>)
 8000a62:	f7ff ffd7 	bl	8000a14 <RTOS_ActivateTask>

	Start_Systick(); //1ms
 8000a66:	f7ff fc26 	bl	80002b6 <Start_Systick>

	OS_SET_PSP(OS_Control.Current_Task->Current_PSP);
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <RTOS_StartOS+0x54>)
 8000a6c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f380 8809 	msr	PSP, r0
	OS_SWITCH_SP_to_PSP;
 8000a78:	f3ef 8014 	mrs	r0, CONTROL
 8000a7c:	f04f 0102 	mov.w	r1, #2
 8000a80:	ea40 0001 	orr.w	r0, r0, r1
 8000a84:	f380 8814 	msr	CONTROL, r0
	SWITCH_CPU_AccessLevel_unprivileged;
 8000a88:	f3ef 8314 	mrs	r3, CONTROL
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	f383 8814 	msr	CONTROL, r3

	RTOS_IdleTask.P_TaskEntery();
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <RTOS_StartOS+0x58>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	4798      	blx	r3
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000040 	.word	0x20000040
 8000aa4:	20000204 	.word	0x20000204

08000aa8 <RTOS_Update_TaskWaitingTime>:
	RTOS_TerminalTask(T_ref);

}

void RTOS_Update_TaskWaitingTime()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	for(int i=0; i<OS_Control.NumberOfCreatedTask; i++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	e02f      	b.n	8000b14 <RTOS_Update_TaskWaitingTime+0x6c>
	{
		if(OS_Control.OS_Tasks[i]->Task_State == Suspended)
 8000ab4:	4a1d      	ldr	r2, [pc, #116]	; (8000b2c <RTOS_Update_TaskWaitingTime+0x84>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	7e1b      	ldrb	r3, [r3, #24]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d125      	bne.n	8000b0e <RTOS_Update_TaskWaitingTime+0x66>
		{
			if(OS_Control.OS_Tasks[i]->TimeWait.Blocking == Blocking_Enable)
 8000ac2:	4a1a      	ldr	r2, [pc, #104]	; (8000b2c <RTOS_Update_TaskWaitingTime+0x84>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d11d      	bne.n	8000b0e <RTOS_Update_TaskWaitingTime+0x66>
			{
				OS_Control.OS_Tasks[i]->TimeWait.Ticks_count--;
 8000ad2:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <RTOS_Update_TaskWaitingTime+0x84>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000adc:	3a01      	subs	r2, #1
 8000ade:	63da      	str	r2, [r3, #60]	; 0x3c
				if(	OS_Control.OS_Tasks[i]->TimeWait.Ticks_count == 0)
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <RTOS_Update_TaskWaitingTime+0x84>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d10f      	bne.n	8000b0e <RTOS_Update_TaskWaitingTime+0x66>
				{
					OS_Control.OS_Tasks[i]->TimeWait.Blocking= Blocking_Disable;
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <RTOS_Update_TaskWaitingTime+0x84>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af6:	2201      	movs	r2, #1
 8000af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					OS_Control.OS_Tasks[i]->Task_State = Waiting;
 8000afc:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <RTOS_Update_TaskWaitingTime+0x84>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	2202      	movs	r2, #2
 8000b06:	761a      	strb	r2, [r3, #24]
					OS_SVC_Set(TaskWaitingTime);
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f7ff ff6b 	bl	80009e4 <OS_SVC_Set>
	for(int i=0; i<OS_Control.NumberOfCreatedTask; i++)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3301      	adds	r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <RTOS_Update_TaskWaitingTime+0x84>)
 8000b16:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	dbc8      	blt.n	8000ab4 <RTOS_Update_TaskWaitingTime+0xc>

				}
			}
		}
	}
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000040 	.word	0x20000040

08000b30 <RTOS_TakeMutex>:

RTOS_errorID RTOS_TakeMutex(Mutex_ref* M_ref, Task_ref* T_ref)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
	if(M_ref->CurrentTaskUser == NULL)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d103      	bne.n	8000b4a <RTOS_TakeMutex+0x1a>
	{
		M_ref->CurrentTaskUser = T_ref;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	e00c      	b.n	8000b64 <RTOS_TakeMutex+0x34>
	}else{
		if(M_ref->NexttTaskUser == NULL)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d106      	bne.n	8000b60 <RTOS_TakeMutex+0x30>
		{
			M_ref->NexttTaskUser = T_ref;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	60da      	str	r2, [r3, #12]
			RTOS_TerminalTask(T_ref);
 8000b58:	6838      	ldr	r0, [r7, #0]
 8000b5a:	f7ff ff69 	bl	8000a30 <RTOS_TerminalTask>
 8000b5e:	e001      	b.n	8000b64 <RTOS_TakeMutex+0x34>

		}else{
			return MutexMaxNumberOfUsers;
 8000b60:	2303      	movs	r3, #3
 8000b62:	e000      	b.n	8000b66 <RTOS_TakeMutex+0x36>
		}
	}
	return NOError;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <RTOS_ReleaseMutex>:

RTOS_errorID RTOS_ReleaseMutex(Mutex_ref* M_ref)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	if(M_ref->CurrentTaskUser != NULL)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00b      	beq.n	8000b96 <RTOS_ReleaseMutex+0x28>
	{
		M_ref->CurrentTaskUser = M_ref->NexttTaskUser;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68da      	ldr	r2, [r3, #12]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	609a      	str	r2, [r3, #8]
		M_ref->NexttTaskUser = NULL;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
		RTOS_ActivateTask(M_ref->CurrentTaskUser);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff3f 	bl	8000a14 <RTOS_ActivateTask>
	}
	return NOError;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <Task1>:
Mutex_ref Mutex1;
unsigned char payload[3]={0,1,2};


void Task1()
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	static int count=0;
	while(1)
	{
		T1_Led ^=1;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <Task1+0x4c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	f083 0301 	eor.w	r3, r3, #1
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <Task1+0x4c>)
 8000bb0:	701a      	strb	r2, [r3, #0]
		count++;
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <Task1+0x50>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <Task1+0x50>)
 8000bba:	6013      	str	r3, [r2, #0]
		if(count == 100)
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <Task1+0x50>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b64      	cmp	r3, #100	; 0x64
 8000bc2:	d107      	bne.n	8000bd4 <Task1+0x34>
		{
			RTOS_TakeMutex(&Mutex1, &T1);
 8000bc4:	490b      	ldr	r1, [pc, #44]	; (8000bf4 <Task1+0x54>)
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <Task1+0x58>)
 8000bc8:	f7ff ffb2 	bl	8000b30 <RTOS_TakeMutex>
			RTOS_ActivateTask(&T2);
 8000bcc:	480b      	ldr	r0, [pc, #44]	; (8000bfc <Task1+0x5c>)
 8000bce:	f7ff ff21 	bl	8000a14 <RTOS_ActivateTask>
 8000bd2:	e7e7      	b.n	8000ba4 <Task1+0x4>
		}
		else if(count == 200)
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <Task1+0x50>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2bc8      	cmp	r3, #200	; 0xc8
 8000bda:	d1e3      	bne.n	8000ba4 <Task1+0x4>
		{
			count = 0;
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <Task1+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
			RTOS_ReleaseMutex(&Mutex1);
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <Task1+0x58>)
 8000be4:	f7ff ffc3 	bl	8000b6e <RTOS_ReleaseMutex>
		T1_Led ^=1;
 8000be8:	e7dc      	b.n	8000ba4 <Task1+0x4>
 8000bea:	bf00      	nop
 8000bec:	20000466 	.word	0x20000466
 8000bf0:	20000020 	.word	0x20000020
 8000bf4:	200004a8 	.word	0x200004a8
 8000bf8:	20000414 	.word	0x20000414
 8000bfc:	200003d4 	.word	0x200003d4

08000c00 <Task2>:
		}
	}
}

void Task2()
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	static int count=0;
	while(1)
	{
		T2_Led ^=1;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <Task2+0x44>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	f083 0301 	eor.w	r3, r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <Task2+0x44>)
 8000c10:	701a      	strb	r2, [r3, #0]
		count++;
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <Task2+0x48>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <Task2+0x48>)
 8000c1a:	6013      	str	r3, [r2, #0]
		if(count == 100)
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <Task2+0x48>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b64      	cmp	r3, #100	; 0x64
 8000c22:	d103      	bne.n	8000c2c <Task2+0x2c>
		{
			RTOS_ActivateTask(&T3);
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <Task2+0x4c>)
 8000c26:	f7ff fef5 	bl	8000a14 <RTOS_ActivateTask>
 8000c2a:	e7eb      	b.n	8000c04 <Task2+0x4>
		}
		else if(count == 200)
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <Task2+0x48>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2bc8      	cmp	r3, #200	; 0xc8
 8000c32:	d1e7      	bne.n	8000c04 <Task2+0x4>
		{
			count = 0;
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <Task2+0x48>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
			RTOS_TerminalTask(&T2);
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <Task2+0x50>)
 8000c3c:	f7ff fef8 	bl	8000a30 <RTOS_TerminalTask>
		T2_Led ^=1;
 8000c40:	e7e0      	b.n	8000c04 <Task2+0x4>
 8000c42:	bf00      	nop
 8000c44:	20000465 	.word	0x20000465
 8000c48:	20000024 	.word	0x20000024
 8000c4c:	20000468 	.word	0x20000468
 8000c50:	200003d4 	.word	0x200003d4

08000c54 <Task3>:
		}
	}
}

void Task3()
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	static int count=0;
	while(1)
	{
		T3_Led ^=1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <Task3+0x44>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	f083 0301 	eor.w	r3, r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <Task3+0x44>)
 8000c64:	701a      	strb	r2, [r3, #0]
		count++;
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <Task3+0x48>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <Task3+0x48>)
 8000c6e:	6013      	str	r3, [r2, #0]
		if(count == 100)
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <Task3+0x48>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b64      	cmp	r3, #100	; 0x64
 8000c76:	d103      	bne.n	8000c80 <Task3+0x2c>
		{
			RTOS_ActivateTask(&T4);
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <Task3+0x4c>)
 8000c7a:	f7ff fecb 	bl	8000a14 <RTOS_ActivateTask>
 8000c7e:	e7eb      	b.n	8000c58 <Task3+0x4>
		}
		else if(count == 200)
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <Task3+0x48>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2bc8      	cmp	r3, #200	; 0xc8
 8000c86:	d1e7      	bne.n	8000c58 <Task3+0x4>
		{
			count = 0;
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <Task3+0x48>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
			RTOS_TerminalTask(&T3);
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <Task3+0x50>)
 8000c90:	f7ff fece 	bl	8000a30 <RTOS_TerminalTask>
		T3_Led ^=1;
 8000c94:	e7e0      	b.n	8000c58 <Task3+0x4>
 8000c96:	bf00      	nop
 8000c98:	20000464 	.word	0x20000464
 8000c9c:	20000028 	.word	0x20000028
 8000ca0:	20000424 	.word	0x20000424
 8000ca4:	20000468 	.word	0x20000468

08000ca8 <Task4>:
		}
	}
}

void Task4()
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	static int count=0;
	while(1)
	{
		T4_Led ^=1;
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <Task4+0x48>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	f083 0301 	eor.w	r3, r3, #1
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <Task4+0x48>)
 8000cb8:	701a      	strb	r2, [r3, #0]
		count++;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <Task4+0x4c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <Task4+0x4c>)
 8000cc2:	6013      	str	r3, [r2, #0]
		if(count == 3)
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <Task4+0x4c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d103      	bne.n	8000cd4 <Task4+0x2c>
		{
			RTOS_TakeMutex(&Mutex1, &T4);
 8000ccc:	490a      	ldr	r1, [pc, #40]	; (8000cf8 <Task4+0x50>)
 8000cce:	480b      	ldr	r0, [pc, #44]	; (8000cfc <Task4+0x54>)
 8000cd0:	f7ff ff2e 	bl	8000b30 <RTOS_TakeMutex>
		}
		if(count == 200)
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <Task4+0x4c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2bc8      	cmp	r3, #200	; 0xc8
 8000cda:	d1e7      	bne.n	8000cac <Task4+0x4>
		{
			count = 0;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <Task4+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
			RTOS_ReleaseMutex(&Mutex1);
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <Task4+0x54>)
 8000ce4:	f7ff ff43 	bl	8000b6e <RTOS_ReleaseMutex>
			RTOS_TerminalTask(&T4);
 8000ce8:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <Task4+0x50>)
 8000cea:	f7ff fea1 	bl	8000a30 <RTOS_TerminalTask>
		T4_Led ^=1;
 8000cee:	e7dd      	b.n	8000cac <Task4+0x4>
 8000cf0:	200004e8 	.word	0x200004e8
 8000cf4:	2000002c 	.word	0x2000002c
 8000cf8:	20000424 	.word	0x20000424
 8000cfc:	20000414 	.word	0x20000414

08000d00 <main>:
		}
	}
}

int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	Hardware_init();
 8000d04:	f7ff face 	bl	80002a4 <Hardware_init>
	RTOS_init();
 8000d08:	f7ff fbae 	bl	8000468 <RTOS_init>

	Mutex1.PayloadSize = 3;
 8000d0c:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <main+0xd4>)
 8000d0e:	2203      	movs	r2, #3
 8000d10:	605a      	str	r2, [r3, #4]
	Mutex1.Ppayload = payload;
 8000d12:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <main+0xd4>)
 8000d14:	4a30      	ldr	r2, [pc, #192]	; (8000dd8 <main+0xd8>)
 8000d16:	601a      	str	r2, [r3, #0]

	T1.Stack_Size = 1024;
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <main+0xdc>)
 8000d1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d1e:	601a      	str	r2, [r3, #0]
	T1.P_TaskEntery = Task1;
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <main+0xdc>)
 8000d22:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <main+0xe0>)
 8000d24:	609a      	str	r2, [r3, #8]
	T1.Priority = 4;
 8000d26:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <main+0xdc>)
 8000d28:	2204      	movs	r2, #4
 8000d2a:	711a      	strb	r2, [r3, #4]
	T1.Task_State = Suspended;
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <main+0xdc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	761a      	strb	r2, [r3, #24]
	strcpy(T1.Task_name,"task1");
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <main+0xe4>)
 8000d34:	4a2c      	ldr	r2, [pc, #176]	; (8000de8 <main+0xe8>)
 8000d36:	6810      	ldr	r0, [r2, #0]
 8000d38:	6018      	str	r0, [r3, #0]
 8000d3a:	8892      	ldrh	r2, [r2, #4]
 8000d3c:	809a      	strh	r2, [r3, #4]

	T2.Stack_Size = 1024;
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <main+0xec>)
 8000d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d44:	601a      	str	r2, [r3, #0]
	T2.P_TaskEntery = Task2;
 8000d46:	4b29      	ldr	r3, [pc, #164]	; (8000dec <main+0xec>)
 8000d48:	4a29      	ldr	r2, [pc, #164]	; (8000df0 <main+0xf0>)
 8000d4a:	609a      	str	r2, [r3, #8]
	T2.Priority = 3;
 8000d4c:	4b27      	ldr	r3, [pc, #156]	; (8000dec <main+0xec>)
 8000d4e:	2203      	movs	r2, #3
 8000d50:	711a      	strb	r2, [r3, #4]
	T2.Task_State = Suspended;
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <main+0xec>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	761a      	strb	r2, [r3, #24]
	strcpy(T2.Task_name,"task2");
 8000d58:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <main+0xf4>)
 8000d5a:	4a27      	ldr	r2, [pc, #156]	; (8000df8 <main+0xf8>)
 8000d5c:	6810      	ldr	r0, [r2, #0]
 8000d5e:	6018      	str	r0, [r3, #0]
 8000d60:	8892      	ldrh	r2, [r2, #4]
 8000d62:	809a      	strh	r2, [r3, #4]

	T3.Stack_Size = 1024;
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <main+0xfc>)
 8000d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6a:	601a      	str	r2, [r3, #0]
	T3.P_TaskEntery = Task3;
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <main+0xfc>)
 8000d6e:	4a24      	ldr	r2, [pc, #144]	; (8000e00 <main+0x100>)
 8000d70:	609a      	str	r2, [r3, #8]
	T3.Priority = 2;
 8000d72:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <main+0xfc>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	711a      	strb	r2, [r3, #4]
	T3.Task_State = Suspended;
 8000d78:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <main+0xfc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	761a      	strb	r2, [r3, #24]
	strcpy(T3.Task_name,"task3");
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <main+0x104>)
 8000d80:	4a21      	ldr	r2, [pc, #132]	; (8000e08 <main+0x108>)
 8000d82:	6810      	ldr	r0, [r2, #0]
 8000d84:	6018      	str	r0, [r3, #0]
 8000d86:	8892      	ldrh	r2, [r2, #4]
 8000d88:	809a      	strh	r2, [r3, #4]


	T4.Stack_Size = 1024;
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <main+0x10c>)
 8000d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d90:	601a      	str	r2, [r3, #0]
	T4.P_TaskEntery = Task4;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <main+0x10c>)
 8000d94:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <main+0x110>)
 8000d96:	609a      	str	r2, [r3, #8]
	T4.Priority = 1;
 8000d98:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <main+0x10c>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	711a      	strb	r2, [r3, #4]
	T4.Task_State = Suspended;
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <main+0x10c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	761a      	strb	r2, [r3, #24]
	strcpy(T4.Task_name,"task4");
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <main+0x114>)
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <main+0x118>)
 8000da8:	6810      	ldr	r0, [r2, #0]
 8000daa:	6018      	str	r0, [r3, #0]
 8000dac:	8892      	ldrh	r2, [r2, #4]
 8000dae:	809a      	strh	r2, [r3, #4]

	RTOS_CreateTask(&T1);
 8000db0:	480a      	ldr	r0, [pc, #40]	; (8000ddc <main+0xdc>)
 8000db2:	f7ff fbdd 	bl	8000570 <RTOS_CreateTask>
	RTOS_CreateTask(&T2);
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <main+0xec>)
 8000db8:	f7ff fbda 	bl	8000570 <RTOS_CreateTask>
	RTOS_CreateTask(&T3);
 8000dbc:	480f      	ldr	r0, [pc, #60]	; (8000dfc <main+0xfc>)
 8000dbe:	f7ff fbd7 	bl	8000570 <RTOS_CreateTask>
	RTOS_CreateTask(&T4);
 8000dc2:	4812      	ldr	r0, [pc, #72]	; (8000e0c <main+0x10c>)
 8000dc4:	f7ff fbd4 	bl	8000570 <RTOS_CreateTask>


	RTOS_ActivateTask(&T1);
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <main+0xdc>)
 8000dca:	f7ff fe23 	bl	8000a14 <RTOS_ActivateTask>

	RTOS_StartOS();
 8000dce:	f7ff fe3d 	bl	8000a4c <RTOS_StartOS>

	while(1)
 8000dd2:	e7fe      	b.n	8000dd2 <main+0xd2>
 8000dd4:	20000414 	.word	0x20000414
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	200004a8 	.word	0x200004a8
 8000de0:	08000ba1 	.word	0x08000ba1
 8000de4:	200004c1 	.word	0x200004c1
 8000de8:	08001170 	.word	0x08001170
 8000dec:	200003d4 	.word	0x200003d4
 8000df0:	08000c01 	.word	0x08000c01
 8000df4:	200003ed 	.word	0x200003ed
 8000df8:	08001178 	.word	0x08001178
 8000dfc:	20000468 	.word	0x20000468
 8000e00:	08000c55 	.word	0x08000c55
 8000e04:	20000481 	.word	0x20000481
 8000e08:	08001180 	.word	0x08001180
 8000e0c:	20000424 	.word	0x20000424
 8000e10:	08000ca9 	.word	0x08000ca9
 8000e14:	2000043d 	.word	0x2000043d
 8000e18:	08001188 	.word	0x08001188

08000e1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	; (8000e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <LoopForever+0xe>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <LoopForever+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e4a:	f000 f95b 	bl	8001104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4e:	f7ff ff57 	bl	8000d00 <main>

08000e52 <LoopForever>:

LoopForever:
    b LoopForever
 8000e52:	e7fe      	b.n	8000e52 <LoopForever>
  ldr   r0, =_estack
 8000e54:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000e60:	08001198 	.word	0x08001198
  ldr r2, =_sbss
 8000e64:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000e68:	20000528 	.word	0x20000528

08000e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_2_IRQHandler>
	...

08000e70 <EXTI0_IRQHandler>:
*================================================================
*                          ISR functions
*================================================================
*/
void EXTI0_IRQHandler (void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <EXTI0_IRQHandler+0x1c>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <EXTI0_IRQHandler+0x1c>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[0]();
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <EXTI0_IRQHandler+0x20>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4798      	blx	r3
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40010400 	.word	0x40010400
 8000e90:	200004ec 	.word	0x200004ec

08000e94 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<1;
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <EXTI1_IRQHandler+0x1c>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <EXTI1_IRQHandler+0x1c>)
 8000e9e:	f043 0302 	orr.w	r3, r3, #2
 8000ea2:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[1]();
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <EXTI1_IRQHandler+0x20>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4798      	blx	r3
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40010400 	.word	0x40010400
 8000eb4:	200004ec 	.word	0x200004ec

08000eb8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<2;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <EXTI2_IRQHandler+0x1c>)
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <EXTI2_IRQHandler+0x1c>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[2]();
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <EXTI2_IRQHandler+0x20>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	4798      	blx	r3
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40010400 	.word	0x40010400
 8000ed8:	200004ec 	.word	0x200004ec

08000edc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<3;
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <EXTI3_IRQHandler+0x1c>)
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <EXTI3_IRQHandler+0x1c>)
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[3]();
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <EXTI3_IRQHandler+0x20>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	4798      	blx	r3
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40010400 	.word	0x40010400
 8000efc:	200004ec 	.word	0x200004ec

08000f00 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<4;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <EXTI4_IRQHandler+0x1c>)
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <EXTI4_IRQHandler+0x1c>)
 8000f0a:	f043 0310 	orr.w	r3, r3, #16
 8000f0e:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[4]();
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <EXTI4_IRQHandler+0x20>)
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	4798      	blx	r3
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40010400 	.word	0x40010400
 8000f20:	200004ec 	.word	0x200004ec

08000f24 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CALLBACK[5](); }
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	f003 0320 	and.w	r3, r3, #32
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d008      	beq.n	8000f46 <EXTI9_5_IRQHandler+0x22>
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	4a22      	ldr	r2, [pc, #136]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000f3a:	f043 0320 	orr.w	r3, r3, #32
 8000f3e:	6153      	str	r3, [r2, #20]
 8000f40:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <EXTI9_5_IRQHandler+0xa4>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CALLBACK[6](); }
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d008      	beq.n	8000f64 <EXTI9_5_IRQHandler+0x40>
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <EXTI9_5_IRQHandler+0xa4>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CALLBACK[7](); }
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d008      	beq.n	8000f82 <EXTI9_5_IRQHandler+0x5e>
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7a:	6153      	str	r3, [r2, #20]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <EXTI9_5_IRQHandler+0xa4>)
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CALLBACK[8](); }
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d008      	beq.n	8000fa0 <EXTI9_5_IRQHandler+0x7c>
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f98:	6153      	str	r3, [r2, #20]
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <EXTI9_5_IRQHandler+0xa4>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CALLBACK[9](); }
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d008      	beq.n	8000fbe <EXTI9_5_IRQHandler+0x9a>
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <EXTI9_5_IRQHandler+0xa0>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6153      	str	r3, [r2, #20]
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <EXTI9_5_IRQHandler+0xa4>)
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	4798      	blx	r3

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40010400 	.word	0x40010400
 8000fc8:	200004ec 	.word	0x200004ec

08000fcc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CALLBACK[10](); }
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d008      	beq.n	8000fee <EXTI15_10_IRQHandler+0x22>
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	4a29      	ldr	r2, [pc, #164]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 8000fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe6:	6153      	str	r3, [r2, #20]
 8000fe8:	4b28      	ldr	r3, [pc, #160]	; (800108c <EXTI15_10_IRQHandler+0xc0>)
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CALLBACK[11](); }
 8000fee:	4b26      	ldr	r3, [pc, #152]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d008      	beq.n	800100c <EXTI15_10_IRQHandler+0x40>
 8000ffa:	4b23      	ldr	r3, [pc, #140]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4a22      	ldr	r2, [pc, #136]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 8001000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001004:	6153      	str	r3, [r2, #20]
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <EXTI15_10_IRQHandler+0xc0>)
 8001008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CALLBACK[12](); }
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d008      	beq.n	800102a <EXTI15_10_IRQHandler+0x5e>
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 800101e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001022:	6153      	str	r3, [r2, #20]
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <EXTI15_10_IRQHandler+0xc0>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CALLBACK[13](); }
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d008      	beq.n	8001048 <EXTI15_10_IRQHandler+0x7c>
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 800103c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001040:	6153      	str	r3, [r2, #20]
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <EXTI15_10_IRQHandler+0xc0>)
 8001044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001046:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CALLBACK[14](); }
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d008      	beq.n	8001066 <EXTI15_10_IRQHandler+0x9a>
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 800105a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105e:	6153      	str	r3, [r2, #20]
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <EXTI15_10_IRQHandler+0xc0>)
 8001062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001064:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CALLBACK[15](); }
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d008      	beq.n	8001084 <EXTI15_10_IRQHandler+0xb8>
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <EXTI15_10_IRQHandler+0xbc>)
 8001078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800107c:	6153      	str	r3, [r2, #20]
 800107e:	4b03      	ldr	r3, [pc, #12]	; (800108c <EXTI15_10_IRQHandler+0xc0>)
 8001080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001082:	4798      	blx	r3

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40010400 	.word	0x40010400
 800108c:	200004ec 	.word	0x200004ec

08001090 <SPI1_IRQHandler>:
 *                         IRQ
 * ===========================================================
 */

void SPI1_IRQHandler (void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SPI1_IRQHandler+0x18>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	7938      	ldrb	r0, [r7, #4]
 800109e:	4798      	blx	r3

}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000030 	.word	0x20000030

080010ac <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SPI2_IRQHandler+0x18>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	7938      	ldrb	r0, [r7, #4]
 80010ba:	4798      	blx	r3
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000030 	.word	0x20000030

080010c8 <USART1_IRQHandler>:
                itr++;
            }
}
//ISR
void USART1_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 80010cc:	4b02      	ldr	r3, [pc, #8]	; (80010d8 <USART1_IRQHandler+0x10>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	4798      	blx	r3
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000038 	.word	0x20000038

080010dc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 80010e0:	4b02      	ldr	r3, [pc, #8]	; (80010ec <USART2_IRQHandler+0x10>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	4798      	blx	r3
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000038 	.word	0x20000038

080010f0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 80010f4:	4b02      	ldr	r3, [pc, #8]	; (8001100 <USART3_IRQHandler+0x10>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	4798      	blx	r3
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000038 	.word	0x20000038

08001104 <__libc_init_array>:
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	2500      	movs	r5, #0
 8001108:	4e0c      	ldr	r6, [pc, #48]	; (800113c <__libc_init_array+0x38>)
 800110a:	4c0d      	ldr	r4, [pc, #52]	; (8001140 <__libc_init_array+0x3c>)
 800110c:	1ba4      	subs	r4, r4, r6
 800110e:	10a4      	asrs	r4, r4, #2
 8001110:	42a5      	cmp	r5, r4
 8001112:	d109      	bne.n	8001128 <__libc_init_array+0x24>
 8001114:	f000 f81a 	bl	800114c <_init>
 8001118:	2500      	movs	r5, #0
 800111a:	4e0a      	ldr	r6, [pc, #40]	; (8001144 <__libc_init_array+0x40>)
 800111c:	4c0a      	ldr	r4, [pc, #40]	; (8001148 <__libc_init_array+0x44>)
 800111e:	1ba4      	subs	r4, r4, r6
 8001120:	10a4      	asrs	r4, r4, #2
 8001122:	42a5      	cmp	r5, r4
 8001124:	d105      	bne.n	8001132 <__libc_init_array+0x2e>
 8001126:	bd70      	pop	{r4, r5, r6, pc}
 8001128:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800112c:	4798      	blx	r3
 800112e:	3501      	adds	r5, #1
 8001130:	e7ee      	b.n	8001110 <__libc_init_array+0xc>
 8001132:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001136:	4798      	blx	r3
 8001138:	3501      	adds	r5, #1
 800113a:	e7f2      	b.n	8001122 <__libc_init_array+0x1e>
 800113c:	08001190 	.word	0x08001190
 8001140:	08001190 	.word	0x08001190
 8001144:	08001190 	.word	0x08001190
 8001148:	08001194 	.word	0x08001194

0800114c <_init>:
 800114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114e:	bf00      	nop
 8001150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001152:	bc08      	pop	{r3}
 8001154:	469e      	mov	lr, r3
 8001156:	4770      	bx	lr

08001158 <_fini>:
 8001158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115a:	bf00      	nop
 800115c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800115e:	bc08      	pop	{r3}
 8001160:	469e      	mov	lr, r3
 8001162:	4770      	bx	lr
