
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dac  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000edc  08000edc  00010edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f00  08000f00  00010f08  2**0
                  CONTENTS
  4 .ARM          00000000  08000f00  08000f00  00010f08  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f00  08000f08  00010f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f00  08000f00  00010f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f04  08000f04  00010f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000000  08000f08  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08000f08  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f08  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059b8  00000000  00000000  00010f31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f00  00000000  00000000  000168e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001194  00000000  00000000  000177e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002d8  00000000  00000000  00018980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000260  00000000  00000000  00018c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002e5a  00000000  00000000  00018eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000030a7  00000000  00000000  0001bd12  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000144f5  00000000  00000000  0001edb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000332ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000944  00000000  00000000  0003332c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ec4 	.word	0x08000ec4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ec4 	.word	0x08000ec4

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	88fb      	ldrh	r3, [r7, #6]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
 */

#include "CortexMX_OS_porting.h"

void HardFault_Handler()
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0

}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr

08000228 <MemManage_Handler>:
void MemManage_Handler()
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0

}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <BusFault_Handler>:
void BusFault_Handler()
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0

}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr

08000240 <UsageFault_Handler>:
void UsageFault_Handler()
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0

}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <trigger_OS_PendSV>:

void trigger_OS_PendSV()
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <trigger_OS_PendSV+0x18>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <trigger_OS_PendSV+0x18>)
 8000256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800025a:	6053      	str	r3, [r2, #4]

}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <SysTick_Handler>:

unsigned char SysTickLed;
void SysTick_Handler()
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	SysTickLed ^= 1;
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <SysTick_Handler+0x20>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	f083 0301 	eor.w	r3, r3, #1
 8000274:	b2da      	uxtb	r2, r3
 8000276:	4b04      	ldr	r3, [pc, #16]	; (8000288 <SysTick_Handler+0x20>)
 8000278:	701a      	strb	r2, [r3, #0]

	//Decide what next
	Decide_whatNext();
 800027a:	f000 fa51 	bl	8000720 <Decide_whatNext>

	//trigger OS_PendSV (Switch context/Restore)
	trigger_OS_PendSV();
 800027e:	f7ff ffe5 	bl	800024c <trigger_OS_PendSV>
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000028 	.word	0x20000028

0800028c <SVC_Handler>:

__attribute ((naked))void SVC_Handler()
{
	__asm("tst lr, #4 \n\t"
 800028c:	f01e 0f04 	tst.w	lr, #4
 8000290:	bf0c      	ite	eq
 8000292:	f3ef 8008 	mrseq	r0, MSP
 8000296:	f3ef 8009 	mrsne	r0, PSP
 800029a:	f000 bb67 	b.w	800096c <OS_SVC>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC");
}
 800029e:	bf00      	nop

080002a0 <Hardware_init>:

void Hardware_init()
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	//RCC Default values makes CPU Clock & SysTick Timer clock = 8 MHZ
	//Initializes the System Timer and its interrupt, and starts the System Tick Timer.


	// decrease PendSV interrupt priority to be smaller than or equal SysTick Timer
	__NVIC_SetPriority(PendSV_IRQn, 15);
 80002a4:	210f      	movs	r1, #15
 80002a6:	f06f 0001 	mvn.w	r0, #1
 80002aa:	f7ff ff6b 	bl	8000184 <__NVIC_SetPriority>
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <Start_Systick>:

void Start_Systick()
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	af00      	add	r7, sp, #0
	/* 8 MHZ
	  * 1 count -> 0.125 us
	  * X count -> 1 ms
	  * X = 8000 count
	  */
	SysTick_Config(8000);
 80002b6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80002ba:	f7ff ff8d 	bl	80001d8 <SysTick_Config>

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <FIFO_init>:
 */


#include"MYRTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 80002c2:	b480      	push	{r7}
 80002c4:	b085      	sub	sp, #20
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	60f8      	str	r0, [r7, #12]
 80002ca:	60b9      	str	r1, [r7, #8]
 80002cc:	607a      	str	r2, [r7, #4]

	if(!buff )
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d101      	bne.n	80002d8 <FIFO_init+0x16>
		return FIFO_NULL;
 80002d4:	2303      	movs	r3, #3
 80002d6:	e011      	b.n	80002fc <FIFO_init+0x3a>

	fifo->base = buff ;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	68ba      	ldr	r2, [r7, #8]
 80002dc:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	68da      	ldr	r2, [r3, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	68da      	ldr	r2, [r3, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80002fa:	2300      	movs	r3, #0

}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr

08000306 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <FIFO_enqueue+0x1a>
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	691b      	ldr	r3, [r3, #16]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d101      	bne.n	8000324 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 8000320:	2303      	movs	r3, #3
 8000322:	e02d      	b.n	8000380 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	685a      	ldr	r2, [r3, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	429a      	cmp	r2, r3
 800032e:	d107      	bne.n	8000340 <FIFO_enqueue+0x3a>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	691b      	ldr	r3, [r3, #16]
 8000338:	429a      	cmp	r2, r3
 800033a:	d101      	bne.n	8000340 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800033c:	2301      	movs	r3, #1
 800033e:	e01f      	b.n	8000380 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	1c5a      	adds	r2, r3, #1
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	689b      	ldr	r3, [r3, #8]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	68d2      	ldr	r2, [r2, #12]
 800035a:	4611      	mov	r1, r2
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	6912      	ldr	r2, [r2, #16]
 8000360:	0092      	lsls	r2, r2, #2
 8000362:	440a      	add	r2, r1
 8000364:	3a04      	subs	r2, #4
 8000366:	4293      	cmp	r3, r2
 8000368:	d104      	bne.n	8000374 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	68da      	ldr	r2, [r3, #12]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	e004      	b.n	800037e <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	1d1a      	adds	r2, r3, #4
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 800037e:	2300      	movs	r3, #0


}
 8000380:	4618      	mov	r0, r3
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr

0800038a <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 800038a:	b480      	push	{r7}
 800038c:	b083      	sub	sp, #12
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
 8000392:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d003      	beq.n	80003a4 <FIFO_dequeue+0x1a>
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d101      	bne.n	80003a8 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 80003a4:	2303      	movs	r3, #3
 80003a6:	e028      	b.n	80003fa <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	685a      	ldr	r2, [r3, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d101      	bne.n	80003b8 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80003b4:	2302      	movs	r3, #2
 80003b6:	e020      	b.n	80003fa <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	1e5a      	subs	r2, r3, #1
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	68d2      	ldr	r2, [r2, #12]
 80003d4:	4611      	mov	r1, r2
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	6912      	ldr	r2, [r2, #16]
 80003da:	0092      	lsls	r2, r2, #2
 80003dc:	440a      	add	r2, r1
 80003de:	3a04      	subs	r2, #4
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d104      	bne.n	80003ee <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	68da      	ldr	r2, [r3, #12]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	e004      	b.n	80003f8 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	1d1a      	adds	r2, r3, #4
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <Idle_Task>:
	OS_Modes OSModes;
}OS_Control;

unsigned char IdleTaskLed;
void Idle_Task()
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	while(1)
	{
		IdleTaskLed ^= 1;
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <Idle_Task+0x18>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	f083 0301 	eor.w	r3, r3, #1
 8000410:	b2da      	uxtb	r2, r3
 8000412:	4b02      	ldr	r3, [pc, #8]	; (800041c <Idle_Task+0x18>)
 8000414:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 8000416:	bf00      	nop
		IdleTaskLed ^= 1;
 8000418:	e7f6      	b.n	8000408 <Idle_Task+0x4>
 800041a:	bf00      	nop
 800041c:	200001ec 	.word	0x200001ec

08000420 <RTOS_Create_MainStack>:
	}
}

RTOS_errorID RTOS_Create_MainStack()
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
	RTOS_errorID error = NOError;
 8000426:	2300      	movs	r3, #0
 8000428:	71fb      	strb	r3, [r7, #7]

	// 3 KiloByte for MSP
	OS_Control._S_MSP = &_estack ;
 800042a:	4a0c      	ldr	r2, [pc, #48]	; (800045c <RTOS_Create_MainStack+0x3c>)
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <RTOS_Create_MainStack+0x40>)
 800042e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP = OS_Control._S_MSP - MainStackSize;
 8000432:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <RTOS_Create_MainStack+0x40>)
 8000434:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000438:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800043c:	4a08      	ldr	r2, [pc, #32]	; (8000460 <RTOS_Create_MainStack+0x40>)
 800043e:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_Control.PSP_TaskLocator = (OS_Control._E_MSP - 8);
 8000442:	4b07      	ldr	r3, [pc, #28]	; (8000460 <RTOS_Create_MainStack+0x40>)
 8000444:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000448:	3b08      	subs	r3, #8
 800044a:	4a05      	ldr	r2, [pc, #20]	; (8000460 <RTOS_Create_MainStack+0x40>)
 800044c:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	return error;
 8000450:	79fb      	ldrb	r3, [r7, #7]

}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	20002800 	.word	0x20002800
 8000460:	2000002c 	.word	0x2000002c

08000464 <RTOS_init>:

RTOS_errorID RTOS_init()
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
	RTOS_errorID error = NOError;
 800046a:	2300      	movs	r3, #0
 800046c:	71fb      	strb	r3, [r7, #7]

	//Update OS mode
	OS_Control.OSModes = OSSuspended;
 800046e:	4b17      	ldr	r3, [pc, #92]	; (80004cc <RTOS_init+0x68>)
 8000470:	2200      	movs	r2, #0
 8000472:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the MAIN stack for OS
	RTOS_Create_MainStack();
 8000476:	f7ff ffd3 	bl	8000420 <RTOS_Create_MainStack>

	//Create OS ready Queue
	if (FIFO_init(&Ready_QUEUE, Ready_QUEUE_FIFO, 100) !=FIFO_NO_ERROR)
 800047a:	2264      	movs	r2, #100	; 0x64
 800047c:	4914      	ldr	r1, [pc, #80]	; (80004d0 <RTOS_init+0x6c>)
 800047e:	4815      	ldr	r0, [pc, #84]	; (80004d4 <RTOS_init+0x70>)
 8000480:	f7ff ff1f 	bl	80002c2 <FIFO_init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d002      	beq.n	8000490 <RTOS_init+0x2c>
	{
		error += Ready_Queue_init_error ;
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	3301      	adds	r3, #1
 800048e:	71fb      	strb	r3, [r7, #7]
	}

	//Configure IDLE TASK
	strcpy(RTOS_IdleTask.Task_name, "idleTask");
 8000490:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <RTOS_init+0x74>)
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <RTOS_init+0x78>)
 8000494:	cb03      	ldmia	r3!, {r0, r1}
 8000496:	6010      	str	r0, [r2, #0]
 8000498:	6051      	str	r1, [r2, #4]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	7213      	strb	r3, [r2, #8]
	RTOS_IdleTask.Priority = 255;                	//lowest Priority (unsigned char -> 255)
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <RTOS_init+0x7c>)
 80004a0:	22ff      	movs	r2, #255	; 0xff
 80004a2:	711a      	strb	r2, [r3, #4]
	RTOS_IdleTask.P_TaskEntery = Idle_Task;
 80004a4:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <RTOS_init+0x7c>)
 80004a6:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <RTOS_init+0x80>)
 80004a8:	609a      	str	r2, [r3, #8]
	RTOS_IdleTask.Stack_Size = 300;
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <RTOS_init+0x7c>)
 80004ac:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004b0:	601a      	str	r2, [r3, #0]

	error += RTOS_CreateTask(&RTOS_IdleTask);
 80004b2:	480b      	ldr	r0, [pc, #44]	; (80004e0 <RTOS_init+0x7c>)
 80004b4:	f000 f85a 	bl	800056c <RTOS_CreateTask>
 80004b8:	4603      	mov	r3, r0
 80004ba:	461a      	mov	r2, r3
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	4413      	add	r3, r2
 80004c0:	71fb      	strb	r3, [r7, #7]

	return error;
 80004c2:	79fb      	ldrb	r3, [r7, #7]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000002c 	.word	0x2000002c
 80004d0:	20000230 	.word	0x20000230
 80004d4:	200001d8 	.word	0x200001d8
 80004d8:	20000209 	.word	0x20000209
 80004dc:	08000edc 	.word	0x08000edc
 80004e0:	200001f0 	.word	0x200001f0
 80004e4:	08000405 	.word	0x08000405

080004e8 <RTOS_Create_TaskStack>:

RTOS_errorID RTOS_Create_TaskStack(Task_ref* T_ref)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	RTOS_errorID error = NOError;
 80004f0:	2300      	movs	r3, #0
 80004f2:	72fb      	strb	r3, [r7, #11]
	 *====
	 *will push and pop manually the addition frame to save the other general purpose registers:
	 *r5, r6 , r7 ,r8 ,r9, r10,r11 (Saved/Restore)Manual
	 */

	T_ref->Current_PSP = T_ref->_S_PSP_Task;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	461a      	mov	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	615a      	str	r2, [r3, #20]

	//DUMMY_XPSR should T =1
	T_ref->Current_PSP--;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	1f1a      	subs	r2, r3, #4
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	615a      	str	r2, [r3, #20]
	*(T_ref->Current_PSP) = 0x1000000;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000510:	601a      	str	r2, [r3, #0]

	//PC
	T_ref->Current_PSP--;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	1f1a      	subs	r2, r3, #4
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	615a      	str	r2, [r3, #20]
	*(T_ref->Current_PSP) =  (unsigned int)T_ref->P_TaskEntery;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	689a      	ldr	r2, [r3, #8]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	601a      	str	r2, [r3, #0]

	//LR
	T_ref->Current_PSP--;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	1f1a      	subs	r2, r3, #4
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	615a      	str	r2, [r3, #20]
	//LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
	*(T_ref->Current_PSP) = 0xFFFFFFFD;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	f06f 0202 	mvn.w	r2, #2
 8000538:	601a      	str	r2, [r3, #0]

	int i;
	for(i=0 ; i<13 ; i++ )
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e00b      	b.n	8000558 <RTOS_Create_TaskStack+0x70>
	{
		//rx
		T_ref->Current_PSP--;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	1f1a      	subs	r2, r3, #4
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	615a      	str	r2, [r3, #20]
		*(T_ref->Current_PSP) = 0;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
	for(i=0 ; i<13 ; i++ )
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3301      	adds	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2b0c      	cmp	r3, #12
 800055c:	ddf0      	ble.n	8000540 <RTOS_Create_TaskStack+0x58>
	}

	return error;
 800055e:	7afb      	ldrb	r3, [r7, #11]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
	...

0800056c <RTOS_CreateTask>:

RTOS_errorID RTOS_CreateTask(Task_ref* T_ref)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	RTOS_errorID error = NOError;
 8000574:	2300      	movs	r3, #0
 8000576:	73fb      	strb	r3, [r7, #15]

	//create Its own PSP stack
	//check task stack size exceeded the PSP stack
	T_ref->_S_PSP_Task =  OS_Control.PSP_TaskLocator;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <RTOS_CreateTask+0x68>)
 800057a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	60da      	str	r2, [r3, #12]
	T_ref->_E_PSP_Task = ( OS_Control.PSP_TaskLocator - T_ref->Stack_Size );
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <RTOS_CreateTask+0x68>)
 8000584:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	1ad2      	subs	r2, r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	611a      	str	r2, [r3, #16]
	{
		//return Task_exceeded_StackSize;
	}

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_TaskLocator =  (T_ref->_E_PSP_Task - 8);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	3b08      	subs	r3, #8
 8000598:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <RTOS_CreateTask+0x68>)
 800059a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	RTOS_Create_TaskStack(T_ref);
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f7ff ffa2 	bl	80004e8 <RTOS_Create_TaskStack>

	//update sch Table
	OS_Control.OS_Tasks[OS_Control.NumberOfCreatedTask] = T_ref;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <RTOS_CreateTask+0x68>)
 80005a6:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80005aa:	4619      	mov	r1, r3
 80005ac:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <RTOS_CreateTask+0x68>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	OS_Control.NumberOfCreatedTask++;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <RTOS_CreateTask+0x68>)
 80005b6:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80005ba:	3301      	adds	r3, #1
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <RTOS_CreateTask+0x68>)
 80005c0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	//Task state Update suspend
	T_ref->Task_State = Suspended;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	761a      	strb	r2, [r3, #24]

	return error;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000002c 	.word	0x2000002c

080005d8 <BubbleSort_SchedulerTable>:

void BubbleSort_SchedulerTable()
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
	Task_ref* Temp;
	int i,j;
	for(i=0; i< (OS_Control.NumberOfCreatedTask - 1); i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	e032      	b.n	800064a <BubbleSort_SchedulerTable+0x72>
		for(j=0; j< (OS_Control.NumberOfCreatedTask - 1 -i); j++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	e023      	b.n	8000632 <BubbleSort_SchedulerTable+0x5a>
		{
			if(OS_Control.OS_Tasks[j]->Priority > OS_Control.OS_Tasks[j+1]->Priority)
 80005ea:	4a1e      	ldr	r2, [pc, #120]	; (8000664 <BubbleSort_SchedulerTable+0x8c>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f2:	791a      	ldrb	r2, [r3, #4]
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	3301      	adds	r3, #1
 80005f8:	491a      	ldr	r1, [pc, #104]	; (8000664 <BubbleSort_SchedulerTable+0x8c>)
 80005fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	d913      	bls.n	800062c <BubbleSort_SchedulerTable+0x54>
			{
				Temp = OS_Control.OS_Tasks[j];
 8000604:	4a17      	ldr	r2, [pc, #92]	; (8000664 <BubbleSort_SchedulerTable+0x8c>)
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060c:	607b      	str	r3, [r7, #4]
				OS_Control.OS_Tasks[j]  = OS_Control.OS_Tasks[j+1];
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	3301      	adds	r3, #1
 8000612:	4a14      	ldr	r2, [pc, #80]	; (8000664 <BubbleSort_SchedulerTable+0x8c>)
 8000614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000618:	4912      	ldr	r1, [pc, #72]	; (8000664 <BubbleSort_SchedulerTable+0x8c>)
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OS_Tasks[j+1]  = Temp;
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3301      	adds	r3, #1
 8000624:	490f      	ldr	r1, [pc, #60]	; (8000664 <BubbleSort_SchedulerTable+0x8c>)
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0; j< (OS_Control.NumberOfCreatedTask - 1 -i); j++)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	3301      	adds	r3, #1
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <BubbleSort_SchedulerTable+0x8c>)
 8000634:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	429a      	cmp	r2, r3
 8000642:	dbd2      	blt.n	80005ea <BubbleSort_SchedulerTable+0x12>
	for(i=0; i< (OS_Control.NumberOfCreatedTask - 1); i++)
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3301      	adds	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <BubbleSort_SchedulerTable+0x8c>)
 800064c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000650:	3b01      	subs	r3, #1
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	429a      	cmp	r2, r3
 8000656:	dbc5      	blt.n	80005e4 <BubbleSort_SchedulerTable+0xc>
			}
		}

}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	2000002c 	.word	0x2000002c

08000668 <RTOS_Update_SchedulerTable>:

//Handler mode
void RTOS_Update_SchedulerTable()
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
	BubbleSort_SchedulerTable();
 800066e:	f7ff ffb3 	bl	80005d8 <BubbleSort_SchedulerTable>

	Task_ref* Temp = NULL;
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
	//Free Ready Queue
	while(FIFO_dequeue(&Ready_QUEUE, &Temp)!=FIFO_EMPTY);
 8000676:	bf00      	nop
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4826      	ldr	r0, [pc, #152]	; (8000718 <RTOS_Update_SchedulerTable+0xb0>)
 800067e:	f7ff fe84 	bl	800038a <FIFO_dequeue>
 8000682:	4603      	mov	r3, r0
 8000684:	2b02      	cmp	r3, #2
 8000686:	d1f7      	bne.n	8000678 <RTOS_Update_SchedulerTable+0x10>

	//Update Ready Queue
	Task_ref* Ptask;
	Task_ref* PnextTask;
	int i=0;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
	while(i<OS_Control.NumberOfCreatedTask)
 800068c:	e038      	b.n	8000700 <RTOS_Update_SchedulerTable+0x98>
	{
		Ptask = OS_Control.OS_Tasks[i];
 800068e:	4a23      	ldr	r2, [pc, #140]	; (800071c <RTOS_Update_SchedulerTable+0xb4>)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000696:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OS_Tasks[i+1];
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3301      	adds	r3, #1
 800069c:	4a1f      	ldr	r2, [pc, #124]	; (800071c <RTOS_Update_SchedulerTable+0xb4>)
 800069e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a2:	607b      	str	r3, [r7, #4]
		if(Ptask->Task_State != Suspended)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	7e1b      	ldrb	r3, [r3, #24]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d026      	beq.n	80006fa <RTOS_Update_SchedulerTable+0x92>
		{
			if(PnextTask->Task_State == Suspended)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	7e1b      	ldrb	r3, [r3, #24]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d107      	bne.n	80006c4 <RTOS_Update_SchedulerTable+0x5c>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80006b4:	68b9      	ldr	r1, [r7, #8]
 80006b6:	4818      	ldr	r0, [pc, #96]	; (8000718 <RTOS_Update_SchedulerTable+0xb0>)
 80006b8:	f7ff fe25 	bl	8000306 <FIFO_enqueue>
				Ptask->Task_State=Ready;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	2201      	movs	r2, #1
 80006c0:	761a      	strb	r2, [r3, #24]
				break;
 80006c2:	e024      	b.n	800070e <RTOS_Update_SchedulerTable+0xa6>
			}
			if(Ptask->Priority < PnextTask->Priority )
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	791a      	ldrb	r2, [r3, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d207      	bcs.n	80006e0 <RTOS_Update_SchedulerTable+0x78>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <RTOS_Update_SchedulerTable+0xb0>)
 80006d4:	f7ff fe17 	bl	8000306 <FIFO_enqueue>
				Ptask->Task_State=Ready;
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	2201      	movs	r2, #1
 80006dc:	761a      	strb	r2, [r3, #24]
				break;
 80006de:	e016      	b.n	800070e <RTOS_Update_SchedulerTable+0xa6>
			}else if(Ptask->Priority == PnextTask->Priority )
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	791a      	ldrb	r2, [r3, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d106      	bne.n	80006fa <RTOS_Update_SchedulerTable+0x92>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80006ec:	68b9      	ldr	r1, [r7, #8]
 80006ee:	480a      	ldr	r0, [pc, #40]	; (8000718 <RTOS_Update_SchedulerTable+0xb0>)
 80006f0:	f7ff fe09 	bl	8000306 <FIFO_enqueue>
				Ptask->Task_State=Ready;
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	2201      	movs	r2, #1
 80006f8:	761a      	strb	r2, [r3, #24]
			}
		}
		i++;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
	while(i<OS_Control.NumberOfCreatedTask)
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <RTOS_Update_SchedulerTable+0xb4>)
 8000702:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000706:	461a      	mov	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4293      	cmp	r3, r2
 800070c:	dbbf      	blt.n	800068e <RTOS_Update_SchedulerTable+0x26>
	}
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200001d8 	.word	0x200001d8
 800071c:	2000002c 	.word	0x2000002c

08000720 <Decide_whatNext>:
	TaskWaitingTime
}SVC_ID;


void Decide_whatNext()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	if(Ready_QUEUE.counter == 0 && OS_Control.Current_Task->Task_State != Suspended)
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <Decide_whatNext+0x84>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d118      	bne.n	800075e <Decide_whatNext+0x3e>
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <Decide_whatNext+0x88>)
 800072e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000732:	7e1b      	ldrb	r3, [r3, #24]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d012      	beq.n	800075e <Decide_whatNext+0x3e>
	{
		OS_Control.Current_Task->Task_State = Running;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <Decide_whatNext+0x88>)
 800073a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800073e:	2203      	movs	r2, #3
 8000740:	761a      	strb	r2, [r3, #24]
		FIFO_enqueue(&Ready_QUEUE, OS_Control.Current_Task);
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <Decide_whatNext+0x88>)
 8000744:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000748:	4619      	mov	r1, r3
 800074a:	4816      	ldr	r0, [pc, #88]	; (80007a4 <Decide_whatNext+0x84>)
 800074c:	f7ff fddb 	bl	8000306 <FIFO_enqueue>

		/* This line is crucial for the next step, as it determines which task's
		 * information will be saved and which task will later restore its context.
		 */
		OS_Control.Next_Task = OS_Control.Current_Task;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <Decide_whatNext+0x88>)
 8000752:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <Decide_whatNext+0x88>)
 8000758:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&Ready_QUEUE, OS_Control.Current_Task);
			OS_Control.Current_Task->Task_State = Ready;
		}
	}
}
 800075c:	e01f      	b.n	800079e <Decide_whatNext+0x7e>
		FIFO_dequeue(&Ready_QUEUE, &OS_Control.Next_Task);
 800075e:	4913      	ldr	r1, [pc, #76]	; (80007ac <Decide_whatNext+0x8c>)
 8000760:	4810      	ldr	r0, [pc, #64]	; (80007a4 <Decide_whatNext+0x84>)
 8000762:	f7ff fe12 	bl	800038a <FIFO_dequeue>
		if((OS_Control.Current_Task->Priority == OS_Control.Next_Task->Priority ) && ( OS_Control.Current_Task->Task_State != Suspended))
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <Decide_whatNext+0x88>)
 8000768:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800076c:	791a      	ldrb	r2, [r3, #4]
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <Decide_whatNext+0x88>)
 8000770:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	429a      	cmp	r2, r3
 8000778:	d111      	bne.n	800079e <Decide_whatNext+0x7e>
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <Decide_whatNext+0x88>)
 800077c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000780:	7e1b      	ldrb	r3, [r3, #24]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d00b      	beq.n	800079e <Decide_whatNext+0x7e>
			FIFO_enqueue(&Ready_QUEUE, OS_Control.Current_Task);
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <Decide_whatNext+0x88>)
 8000788:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800078c:	4619      	mov	r1, r3
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <Decide_whatNext+0x84>)
 8000790:	f7ff fdb9 	bl	8000306 <FIFO_enqueue>
			OS_Control.Current_Task->Task_State = Ready;
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <Decide_whatNext+0x88>)
 8000796:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800079a:	2201      	movs	r2, #1
 800079c:	761a      	strb	r2, [r3, #24]
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200001d8 	.word	0x200001d8
 80007a8:	2000002c 	.word	0x2000002c
 80007ac:	200001d0 	.word	0x200001d0

080007b0 <PendSV_Handler>:

	//==============================================
	/* Get the Current Task "Current PSP"
	 * will save manually the addition frame of other general purpose registers
	 */
	OS_GET_PSP(OS_Control.Current_Task->Current_PSP);        //Current_Task for OS when OS in running mode
 80007b0:	4b6d      	ldr	r3, [pc, #436]	; (8000968 <PendSV_Handler+0x1b8>)
 80007b2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007b6:	f3ef 8009 	mrs	r0, PSP
 80007ba:	4602      	mov	r2, r0
 80007bc:	615a      	str	r2, [r3, #20]

	OS_Control.Current_Task->Current_PSP--;
 80007be:	4b6a      	ldr	r3, [pc, #424]	; (8000968 <PendSV_Handler+0x1b8>)
 80007c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007c4:	695a      	ldr	r2, [r3, #20]
 80007c6:	3a04      	subs	r2, #4
 80007c8:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r4 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 80007ca:	4b67      	ldr	r3, [pc, #412]	; (8000968 <PendSV_Handler+0x1b8>)
 80007cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4622      	mov	r2, r4
 80007d4:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 80007d6:	4b64      	ldr	r3, [pc, #400]	; (8000968 <PendSV_Handler+0x1b8>)
 80007d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007dc:	695a      	ldr	r2, [r3, #20]
 80007de:	3a04      	subs	r2, #4
 80007e0:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r5 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 80007e2:	4b61      	ldr	r3, [pc, #388]	; (8000968 <PendSV_Handler+0x1b8>)
 80007e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	462a      	mov	r2, r5
 80007ec:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 80007ee:	4b5e      	ldr	r3, [pc, #376]	; (8000968 <PendSV_Handler+0x1b8>)
 80007f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	3a04      	subs	r2, #4
 80007f8:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r6 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 80007fa:	4b5b      	ldr	r3, [pc, #364]	; (8000968 <PendSV_Handler+0x1b8>)
 80007fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4632      	mov	r2, r6
 8000804:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 8000806:	4b58      	ldr	r3, [pc, #352]	; (8000968 <PendSV_Handler+0x1b8>)
 8000808:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	3a04      	subs	r2, #4
 8000810:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r7 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 8000812:	4b55      	ldr	r3, [pc, #340]	; (8000968 <PendSV_Handler+0x1b8>)
 8000814:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	463a      	mov	r2, r7
 800081c:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 800081e:	4b52      	ldr	r3, [pc, #328]	; (8000968 <PendSV_Handler+0x1b8>)
 8000820:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	3a04      	subs	r2, #4
 8000828:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r8 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 800082a:	4b4f      	ldr	r3, [pc, #316]	; (8000968 <PendSV_Handler+0x1b8>)
 800082c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4642      	mov	r2, r8
 8000834:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 8000836:	4b4c      	ldr	r3, [pc, #304]	; (8000968 <PendSV_Handler+0x1b8>)
 8000838:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800083c:	695a      	ldr	r2, [r3, #20]
 800083e:	3a04      	subs	r2, #4
 8000840:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r9 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 8000842:	4b49      	ldr	r3, [pc, #292]	; (8000968 <PendSV_Handler+0x1b8>)
 8000844:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	464a      	mov	r2, r9
 800084c:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 800084e:	4b46      	ldr	r3, [pc, #280]	; (8000968 <PendSV_Handler+0x1b8>)
 8000850:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000854:	695a      	ldr	r2, [r3, #20]
 8000856:	3a04      	subs	r2, #4
 8000858:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r10 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 800085a:	4b43      	ldr	r3, [pc, #268]	; (8000968 <PendSV_Handler+0x1b8>)
 800085c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4652      	mov	r2, sl
 8000864:	601a      	str	r2, [r3, #0]
	OS_Control.Current_Task->Current_PSP--;
 8000866:	4b40      	ldr	r3, [pc, #256]	; (8000968 <PendSV_Handler+0x1b8>)
 8000868:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800086c:	695a      	ldr	r2, [r3, #20]
 800086e:	3a04      	subs	r2, #4
 8000870:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0, r11 \n\t" : "=r" (*OS_Control.Current_Task->Current_PSP) );
 8000872:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <PendSV_Handler+0x1b8>)
 8000874:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	465a      	mov	r2, fp
 800087c:	601a      	str	r2, [r3, #0]
	 * 	OS_SET_PSP(OS_Control.Next_Task->Current_PSP);
	 * 	This step After pushing the general purpose registers onto the stack manually,
	 * 	CPU PSP register will point to r0
	 */

	OS_Control.Current_Task = OS_Control.Next_Task ;
 800087e:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <PendSV_Handler+0x1b8>)
 8000880:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000884:	4a38      	ldr	r2, [pc, #224]	; (8000968 <PendSV_Handler+0x1b8>)
 8000886:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.Next_Task = NULL ;
 800088a:	4b37      	ldr	r3, [pc, #220]	; (8000968 <PendSV_Handler+0x1b8>)
 800088c:	2200      	movs	r2, #0
 800088e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	__asm volatile("mov r11, %0" : : "r" (*OS_Control.Current_Task->Current_PSP) );
 8000892:	4b35      	ldr	r3, [pc, #212]	; (8000968 <PendSV_Handler+0x1b8>)
 8000894:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	469b      	mov	fp, r3
	OS_Control.Current_Task->Current_PSP++;
 800089e:	4b32      	ldr	r3, [pc, #200]	; (8000968 <PendSV_Handler+0x1b8>)
 80008a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008a4:	695a      	ldr	r2, [r3, #20]
 80008a6:	3204      	adds	r2, #4
 80008a8:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r10, %0" : : "r" (*OS_Control.Current_Task->Current_PSP) );
 80008aa:	4b2f      	ldr	r3, [pc, #188]	; (8000968 <PendSV_Handler+0x1b8>)
 80008ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	469a      	mov	sl, r3
	OS_Control.Current_Task->Current_PSP++;
 80008b6:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <PendSV_Handler+0x1b8>)
 80008b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008bc:	695a      	ldr	r2, [r3, #20]
 80008be:	3204      	adds	r2, #4
 80008c0:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r9, %0"  : : "r" (*OS_Control.Current_Task->Current_PSP) );
 80008c2:	4b29      	ldr	r3, [pc, #164]	; (8000968 <PendSV_Handler+0x1b8>)
 80008c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4699      	mov	r9, r3
	OS_Control.Current_Task->Current_PSP++;
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <PendSV_Handler+0x1b8>)
 80008d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008d4:	695a      	ldr	r2, [r3, #20]
 80008d6:	3204      	adds	r2, #4
 80008d8:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r8, %0"  : : "r" (*OS_Control.Current_Task->Current_PSP) );
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <PendSV_Handler+0x1b8>)
 80008dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4698      	mov	r8, r3
	OS_Control.Current_Task->Current_PSP++;
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <PendSV_Handler+0x1b8>)
 80008e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ec:	695a      	ldr	r2, [r3, #20]
 80008ee:	3204      	adds	r2, #4
 80008f0:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r7, %0"  : : "r" (*OS_Control.Current_Task->Current_PSP) );
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <PendSV_Handler+0x1b8>)
 80008f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	461f      	mov	r7, r3
	OS_Control.Current_Task->Current_PSP++;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <PendSV_Handler+0x1b8>)
 8000900:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	3204      	adds	r2, #4
 8000908:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r6, %0"  : : "r" (*OS_Control.Current_Task->Current_PSP) );
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <PendSV_Handler+0x1b8>)
 800090c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	461e      	mov	r6, r3
	OS_Control.Current_Task->Current_PSP++;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <PendSV_Handler+0x1b8>)
 8000918:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800091c:	695a      	ldr	r2, [r3, #20]
 800091e:	3204      	adds	r2, #4
 8000920:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r5, %0"  : : "r" (*OS_Control.Current_Task->Current_PSP) );
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <PendSV_Handler+0x1b8>)
 8000924:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	461d      	mov	r5, r3
	OS_Control.Current_Task->Current_PSP++;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <PendSV_Handler+0x1b8>)
 8000930:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000934:	695a      	ldr	r2, [r3, #20]
 8000936:	3204      	adds	r2, #4
 8000938:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r4, %0"  : : "r" (*OS_Control.Current_Task->Current_PSP) );
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <PendSV_Handler+0x1b8>)
 800093c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	461c      	mov	r4, r3
	OS_Control.Current_Task->Current_PSP++;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <PendSV_Handler+0x1b8>)
 8000948:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800094c:	695a      	ldr	r2, [r3, #20]
 800094e:	3204      	adds	r2, #4
 8000950:	615a      	str	r2, [r3, #20]
	 * r3
	 * r2
	 * r1
	 * r0
	 */
	OS_SET_PSP(OS_Control.Current_Task->Current_PSP);
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <PendSV_Handler+0x1b8>)
 8000954:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	4618      	mov	r0, r3
 800095c:	f380 8809 	msr	PSP, r0
	/*
	 * __attribute ((naked)) means no stack frame set up by the compiler
	 * manually handle the exit from this Handler
	 * as the compiler will not automatically generate the exit code.
	 */
	__asm volatile("BX LR");
 8000960:	4770      	bx	lr
}
 8000962:	bf00      	nop
 8000964:	4618      	mov	r0, r3
 8000966:	bf00      	nop
 8000968:	2000002c 	.word	0x2000002c

0800096c <OS_SVC>:

//Handler Mode
void OS_SVC(int *StackFramePointer)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	unsigned char SVC_number;
	SVC_number = *( (unsigned char*) ( (unsigned char*)StackFramePointer[6] )-2 ) ;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3318      	adds	r3, #24
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3b02      	subs	r3, #2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	73fb      	strb	r3, [r7, #15]
	switch(SVC_number)
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	2b00      	cmp	r3, #0
 8000984:	db1a      	blt.n	80009bc <OS_SVC+0x50>
 8000986:	2b01      	cmp	r3, #1
 8000988:	dd01      	ble.n	800098e <OS_SVC+0x22>
 800098a:	2b02      	cmp	r3, #2
				trigger_OS_PendSV();
			}
		}
		break;
	case TaskWaitingTime:
		break;
 800098c:	e016      	b.n	80009bc <OS_SVC+0x50>
		RTOS_Update_SchedulerTable();
 800098e:	f7ff fe6b 	bl	8000668 <RTOS_Update_SchedulerTable>
		if (OS_Control.OSModes == OSRunning)
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <OS_SVC+0x58>)
 8000994:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000998:	2b01      	cmp	r3, #1
 800099a:	d10e      	bne.n	80009ba <OS_SVC+0x4e>
			if(strcmp(OS_Control.Current_Task->Task_name,"idleTask") != 0)
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <OS_SVC+0x58>)
 800099e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009a2:	3319      	adds	r3, #25
 80009a4:	4908      	ldr	r1, [pc, #32]	; (80009c8 <OS_SVC+0x5c>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fbe2 	bl	8000170 <strcmp>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <OS_SVC+0x4e>
				Decide_whatNext();
 80009b2:	f7ff feb5 	bl	8000720 <Decide_whatNext>
				trigger_OS_PendSV();
 80009b6:	f7ff fc49 	bl	800024c <trigger_OS_PendSV>
		break;
 80009ba:	bf00      	nop
	}
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000002c 	.word	0x2000002c
 80009c8:	08000edc 	.word	0x08000edc

080009cc <OS_SVC_Set>:

//Thread Mode
int OS_SVC_Set(SVC_ID ID)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d005      	beq.n	80009e8 <OS_SVC_Set+0x1c>
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d005      	beq.n	80009ec <OS_SVC_Set+0x20>
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d105      	bne.n	80009f0 <OS_SVC_Set+0x24>
	{
	case ActivateTask:
		__asm("svc #0x00");
 80009e4:	df00      	svc	0
		break;
 80009e6:	e003      	b.n	80009f0 <OS_SVC_Set+0x24>
	case TerminateTask:
		__asm("svc #0x01");
 80009e8:	df01      	svc	1
		break;
 80009ea:	e001      	b.n	80009f0 <OS_SVC_Set+0x24>
	case TaskWaitingTime:
		__asm("svc #0x02");
 80009ec:	df02      	svc	2
		break;
 80009ee:	bf00      	nop
	}
}
 80009f0:	bf00      	nop
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <RTOS_ActivateTask>:


void RTOS_ActivateTask(Task_ref* T_ref)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	T_ref->Task_State = Waiting;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2202      	movs	r2, #2
 8000a08:	761a      	strb	r2, [r3, #24]
	OS_SVC_Set(ActivateTask);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff ffde 	bl	80009cc <OS_SVC_Set>
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <RTOS_StartOS>:
	T_ref->Task_State = Suspended;
	OS_SVC_Set(TerminateTask);
}

void RTOS_StartOS()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	OS_Control.OSModes = OSRunning;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <RTOS_StartOS+0x54>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set Default Task
	OS_Control.Current_Task = &RTOS_IdleTask;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <RTOS_StartOS+0x54>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <RTOS_StartOS+0x58>)
 8000a28:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	RTOS_ActivateTask(&RTOS_IdleTask);
 8000a2c:	4810      	ldr	r0, [pc, #64]	; (8000a70 <RTOS_StartOS+0x58>)
 8000a2e:	f7ff ffe5 	bl	80009fc <RTOS_ActivateTask>

	Start_Systick(); //1ms
 8000a32:	f7ff fc3e 	bl	80002b2 <Start_Systick>

	OS_SET_PSP(OS_Control.Current_Task->Current_PSP);
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <RTOS_StartOS+0x54>)
 8000a38:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f380 8809 	msr	PSP, r0
	OS_SWITCH_SP_to_PSP;
 8000a44:	f3ef 8014 	mrs	r0, CONTROL
 8000a48:	f04f 0102 	mov.w	r1, #2
 8000a4c:	ea40 0001 	orr.w	r0, r0, r1
 8000a50:	f380 8814 	msr	CONTROL, r0
	SWITCH_CPU_AccessLevel_unprivileged;
 8000a54:	f3ef 8314 	mrs	r3, CONTROL
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	f383 8814 	msr	CONTROL, r3

	RTOS_IdleTask.P_TaskEntery();
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <RTOS_StartOS+0x58>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	4798      	blx	r3
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000002c 	.word	0x2000002c
 8000a70:	200001f0 	.word	0x200001f0

08000a74 <Task1>:
#include "Scheduler.h"

Task_ref T1, T2, T3, T4;
unsigned char T1_Led, T2_Led, T3_Led, T4_Led;
void Task1()
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	while(1)
	{
		T1_Led ^=1;
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <Task1+0x14>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	f083 0301 	eor.w	r3, r3, #1
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b01      	ldr	r3, [pc, #4]	; (8000a88 <Task1+0x14>)
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	e7f7      	b.n	8000a78 <Task1+0x4>
 8000a88:	20000442 	.word	0x20000442

08000a8c <Task2>:
	}
}

void Task2()
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
	while(1)
	{
		T2_Led ^=1;
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <Task2+0x14>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	f083 0301 	eor.w	r3, r3, #1
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b01      	ldr	r3, [pc, #4]	; (8000aa0 <Task2+0x14>)
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e7f7      	b.n	8000a90 <Task2+0x4>
 8000aa0:	20000441 	.word	0x20000441

08000aa4 <Task3>:
	}
}

void Task3()
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
	while(1)
	{
		T3_Led ^=1;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <Task3+0x14>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	f083 0301 	eor.w	r3, r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b01      	ldr	r3, [pc, #4]	; (8000ab8 <Task3+0x14>)
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e7f7      	b.n	8000aa8 <Task3+0x4>
 8000ab8:	20000440 	.word	0x20000440

08000abc <main>:
}



int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	RTOS_errorID error;
	Hardware_init();
 8000ac0:	f7ff fbee 	bl	80002a0 <Hardware_init>
	RTOS_init();
 8000ac4:	f7ff fcce 	bl	8000464 <RTOS_init>

	T1.Stack_Size = 512;
 8000ac8:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <main+0xa8>)
 8000aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ace:	601a      	str	r2, [r3, #0]
	T1.P_TaskEntery = Task1;
 8000ad0:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <main+0xa8>)
 8000ad2:	4a25      	ldr	r2, [pc, #148]	; (8000b68 <main+0xac>)
 8000ad4:	609a      	str	r2, [r3, #8]
	T1.Priority = 3;
 8000ad6:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <main+0xa8>)
 8000ad8:	2203      	movs	r2, #3
 8000ada:	711a      	strb	r2, [r3, #4]
	T1.Task_State = Suspended;
 8000adc:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <main+0xa8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	761a      	strb	r2, [r3, #24]
	strcpy(T1.Task_name,"task1");
 8000ae2:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <main+0xb0>)
 8000ae4:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <main+0xb4>)
 8000ae6:	6810      	ldr	r0, [r2, #0]
 8000ae8:	6018      	str	r0, [r3, #0]
 8000aea:	8892      	ldrh	r2, [r2, #4]
 8000aec:	809a      	strh	r2, [r3, #4]

	T2.Stack_Size = 512;
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <main+0xb8>)
 8000af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af4:	601a      	str	r2, [r3, #0]
	T2.P_TaskEntery = Task2;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <main+0xb8>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	; (8000b78 <main+0xbc>)
 8000afa:	609a      	str	r2, [r3, #8]
	T2.Priority = 3;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <main+0xb8>)
 8000afe:	2203      	movs	r2, #3
 8000b00:	711a      	strb	r2, [r3, #4]
	T2.Task_State = Suspended;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <main+0xb8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	761a      	strb	r2, [r3, #24]
	strcpy(T2.Task_name,"task2");
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <main+0xc0>)
 8000b0a:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <main+0xc4>)
 8000b0c:	6810      	ldr	r0, [r2, #0]
 8000b0e:	6018      	str	r0, [r3, #0]
 8000b10:	8892      	ldrh	r2, [r2, #4]
 8000b12:	809a      	strh	r2, [r3, #4]

	T3.Stack_Size = 512;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <main+0xc8>)
 8000b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b1a:	601a      	str	r2, [r3, #0]
	T3.P_TaskEntery = Task3;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <main+0xc8>)
 8000b1e:	4a1a      	ldr	r2, [pc, #104]	; (8000b88 <main+0xcc>)
 8000b20:	609a      	str	r2, [r3, #8]
	T3.Priority = 3;
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <main+0xc8>)
 8000b24:	2203      	movs	r2, #3
 8000b26:	711a      	strb	r2, [r3, #4]
	T3.Task_State = Suspended;
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <main+0xc8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	761a      	strb	r2, [r3, #24]
	strcpy(T3.Task_name,"task3");
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <main+0xd0>)
 8000b30:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <main+0xd4>)
 8000b32:	6810      	ldr	r0, [r2, #0]
 8000b34:	6018      	str	r0, [r3, #0]
 8000b36:	8892      	ldrh	r2, [r2, #4]
 8000b38:	809a      	strh	r2, [r3, #4]



	RTOS_CreateTask(&T1);
 8000b3a:	480a      	ldr	r0, [pc, #40]	; (8000b64 <main+0xa8>)
 8000b3c:	f7ff fd16 	bl	800056c <RTOS_CreateTask>
	RTOS_CreateTask(&T2);
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <main+0xb8>)
 8000b42:	f7ff fd13 	bl	800056c <RTOS_CreateTask>
	RTOS_CreateTask(&T3);
 8000b46:	480f      	ldr	r0, [pc, #60]	; (8000b84 <main+0xc8>)
 8000b48:	f7ff fd10 	bl	800056c <RTOS_CreateTask>


	RTOS_ActivateTask(&T1);
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <main+0xa8>)
 8000b4e:	f7ff ff55 	bl	80009fc <RTOS_ActivateTask>
	RTOS_ActivateTask(&T2);
 8000b52:	4808      	ldr	r0, [pc, #32]	; (8000b74 <main+0xb8>)
 8000b54:	f7ff ff52 	bl	80009fc <RTOS_ActivateTask>
	RTOS_ActivateTask(&T3);
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <main+0xc8>)
 8000b5a:	f7ff ff4f 	bl	80009fc <RTOS_ActivateTask>

	RTOS_StartOS();
 8000b5e:	f7ff ff5b 	bl	8000a18 <RTOS_StartOS>

	while(1)
 8000b62:	e7fe      	b.n	8000b62 <main+0xa6>
 8000b64:	20000484 	.word	0x20000484
 8000b68:	08000a75 	.word	0x08000a75
 8000b6c:	2000049d 	.word	0x2000049d
 8000b70:	08000ee8 	.word	0x08000ee8
 8000b74:	200003c0 	.word	0x200003c0
 8000b78:	08000a8d 	.word	0x08000a8d
 8000b7c:	200003d9 	.word	0x200003d9
 8000b80:	08000ef0 	.word	0x08000ef0
 8000b84:	20000444 	.word	0x20000444
 8000b88:	08000aa5 	.word	0x08000aa5
 8000b8c:	2000045d 	.word	0x2000045d
 8000b90:	08000ef8 	.word	0x08000ef8

08000b94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b96:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b98:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	; (8000bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <LoopForever+0xe>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	; (8000be0 <LoopForever+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bc2:	f000 f95b 	bl	8000e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc6:	f7ff ff79 	bl	8000abc <main>

08000bca <LoopForever>:

LoopForever:
    b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   r0, =_estack
 8000bcc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000bd8:	08000f08 	.word	0x08000f08
  ldr r2, =_sbss
 8000bdc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000be0:	20000504 	.word	0x20000504

08000be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>
	...

08000be8 <EXTI0_IRQHandler>:
*================================================================
*                          ISR functions
*================================================================
*/
void EXTI0_IRQHandler (void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <EXTI0_IRQHandler+0x1c>)
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <EXTI0_IRQHandler+0x1c>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[0]();
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <EXTI0_IRQHandler+0x20>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4798      	blx	r3
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40010400 	.word	0x40010400
 8000c08:	200004c8 	.word	0x200004c8

08000c0c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<1;
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <EXTI1_IRQHandler+0x1c>)
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <EXTI1_IRQHandler+0x1c>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[1]();
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <EXTI1_IRQHandler+0x20>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	4798      	blx	r3
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40010400 	.word	0x40010400
 8000c2c:	200004c8 	.word	0x200004c8

08000c30 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<2;
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <EXTI2_IRQHandler+0x1c>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <EXTI2_IRQHandler+0x1c>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[2]();
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <EXTI2_IRQHandler+0x20>)
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	4798      	blx	r3
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40010400 	.word	0x40010400
 8000c50:	200004c8 	.word	0x200004c8

08000c54 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<3;
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <EXTI3_IRQHandler+0x1c>)
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <EXTI3_IRQHandler+0x1c>)
 8000c5e:	f043 0308 	orr.w	r3, r3, #8
 8000c62:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[3]();
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <EXTI3_IRQHandler+0x20>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	4798      	blx	r3
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40010400 	.word	0x40010400
 8000c74:	200004c8 	.word	0x200004c8

08000c78 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<4;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <EXTI4_IRQHandler+0x1c>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <EXTI4_IRQHandler+0x1c>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[4]();
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <EXTI4_IRQHandler+0x20>)
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	4798      	blx	r3
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40010400 	.word	0x40010400
 8000c98:	200004c8 	.word	0x200004c8

08000c9c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CALLBACK[5](); }
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	f003 0320 	and.w	r3, r3, #32
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d008      	beq.n	8000cbe <EXTI9_5_IRQHandler+0x22>
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	4a22      	ldr	r2, [pc, #136]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000cb2:	f043 0320 	orr.w	r3, r3, #32
 8000cb6:	6153      	str	r3, [r2, #20]
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <EXTI9_5_IRQHandler+0xa4>)
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CALLBACK[6](); }
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d008      	beq.n	8000cdc <EXTI9_5_IRQHandler+0x40>
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd4:	6153      	str	r3, [r2, #20]
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <EXTI9_5_IRQHandler+0xa4>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CALLBACK[7](); }
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d008      	beq.n	8000cfa <EXTI9_5_IRQHandler+0x5e>
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf2:	6153      	str	r3, [r2, #20]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <EXTI9_5_IRQHandler+0xa4>)
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CALLBACK[8](); }
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d008      	beq.n	8000d18 <EXTI9_5_IRQHandler+0x7c>
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d10:	6153      	str	r3, [r2, #20]
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <EXTI9_5_IRQHandler+0xa4>)
 8000d14:	6a1b      	ldr	r3, [r3, #32]
 8000d16:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CALLBACK[9](); }
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d008      	beq.n	8000d36 <EXTI9_5_IRQHandler+0x9a>
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <EXTI9_5_IRQHandler+0xa0>)
 8000d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2e:	6153      	str	r3, [r2, #20]
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <EXTI9_5_IRQHandler+0xa4>)
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	4798      	blx	r3

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40010400 	.word	0x40010400
 8000d40:	200004c8 	.word	0x200004c8

08000d44 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CALLBACK[10](); }
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d008      	beq.n	8000d66 <EXTI15_10_IRQHandler+0x22>
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	4a29      	ldr	r2, [pc, #164]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5e:	6153      	str	r3, [r2, #20]
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <EXTI15_10_IRQHandler+0xc0>)
 8000d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d64:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CALLBACK[11](); }
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d008      	beq.n	8000d84 <EXTI15_10_IRQHandler+0x40>
 8000d72:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a22      	ldr	r2, [pc, #136]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <EXTI15_10_IRQHandler+0xc0>)
 8000d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d82:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CALLBACK[12](); }
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d008      	beq.n	8000da2 <EXTI15_10_IRQHandler+0x5e>
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	4a1a      	ldr	r2, [pc, #104]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000d96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d9a:	6153      	str	r3, [r2, #20]
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <EXTI15_10_IRQHandler+0xc0>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CALLBACK[13](); }
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d008      	beq.n	8000dc0 <EXTI15_10_IRQHandler+0x7c>
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000db4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000db8:	6153      	str	r3, [r2, #20]
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <EXTI15_10_IRQHandler+0xc0>)
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CALLBACK[14](); }
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d008      	beq.n	8000dde <EXTI15_10_IRQHandler+0x9a>
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd6:	6153      	str	r3, [r2, #20]
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <EXTI15_10_IRQHandler+0xc0>)
 8000dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ddc:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CALLBACK[15](); }
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d008      	beq.n	8000dfc <EXTI15_10_IRQHandler+0xb8>
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <EXTI15_10_IRQHandler+0xbc>)
 8000df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <EXTI15_10_IRQHandler+0xc0>)
 8000df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfa:	4798      	blx	r3

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40010400 	.word	0x40010400
 8000e04:	200004c8 	.word	0x200004c8

08000e08 <SPI1_IRQHandler>:
 *                         IRQ
 * ===========================================================
 */

void SPI1_IRQHandler (void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SPI1_IRQHandler+0x18>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	7938      	ldrb	r0, [r7, #4]
 8000e16:	4798      	blx	r3

}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2000001c 	.word	0x2000001c

08000e24 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SPI2_IRQHandler+0x18>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	7938      	ldrb	r0, [r7, #4]
 8000e32:	4798      	blx	r3
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000001c 	.word	0x2000001c

08000e40 <USART1_IRQHandler>:
                itr++;
            }
}
//ISR
void USART1_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <USART1_IRQHandler+0x10>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	4798      	blx	r3
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000024 	.word	0x20000024

08000e54 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000e58:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <USART2_IRQHandler+0x10>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	4798      	blx	r3
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000024 	.word	0x20000024

08000e68 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000e6c:	4b02      	ldr	r3, [pc, #8]	; (8000e78 <USART3_IRQHandler+0x10>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	4798      	blx	r3
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000024 	.word	0x20000024

08000e7c <__libc_init_array>:
 8000e7c:	b570      	push	{r4, r5, r6, lr}
 8000e7e:	2500      	movs	r5, #0
 8000e80:	4e0c      	ldr	r6, [pc, #48]	; (8000eb4 <__libc_init_array+0x38>)
 8000e82:	4c0d      	ldr	r4, [pc, #52]	; (8000eb8 <__libc_init_array+0x3c>)
 8000e84:	1ba4      	subs	r4, r4, r6
 8000e86:	10a4      	asrs	r4, r4, #2
 8000e88:	42a5      	cmp	r5, r4
 8000e8a:	d109      	bne.n	8000ea0 <__libc_init_array+0x24>
 8000e8c:	f000 f81a 	bl	8000ec4 <_init>
 8000e90:	2500      	movs	r5, #0
 8000e92:	4e0a      	ldr	r6, [pc, #40]	; (8000ebc <__libc_init_array+0x40>)
 8000e94:	4c0a      	ldr	r4, [pc, #40]	; (8000ec0 <__libc_init_array+0x44>)
 8000e96:	1ba4      	subs	r4, r4, r6
 8000e98:	10a4      	asrs	r4, r4, #2
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	d105      	bne.n	8000eaa <__libc_init_array+0x2e>
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ea4:	4798      	blx	r3
 8000ea6:	3501      	adds	r5, #1
 8000ea8:	e7ee      	b.n	8000e88 <__libc_init_array+0xc>
 8000eaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eae:	4798      	blx	r3
 8000eb0:	3501      	adds	r5, #1
 8000eb2:	e7f2      	b.n	8000e9a <__libc_init_array+0x1e>
 8000eb4:	08000f00 	.word	0x08000f00
 8000eb8:	08000f00 	.word	0x08000f00
 8000ebc:	08000f00 	.word	0x08000f00
 8000ec0:	08000f04 	.word	0x08000f04

08000ec4 <_init>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	bf00      	nop
 8000ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eca:	bc08      	pop	{r3}
 8000ecc:	469e      	mov	lr, r3
 8000ece:	4770      	bx	lr

08000ed0 <_fini>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	bf00      	nop
 8000ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed6:	bc08      	pop	{r3}
 8000ed8:	469e      	mov	lr, r3
 8000eda:	4770      	bx	lr
