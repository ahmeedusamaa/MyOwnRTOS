
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000704  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000834  08000834  00010834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000858  08000858  00010860  2**0
                  CONTENTS
  4 .ARM          00000000  08000858  08000858  00010860  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000858  08000860  00010860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000858  08000858  00010858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800085c  0800085c  0001085c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000000  08000860  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08000860  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010860  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000553b  00000000  00000000  00010889  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d6b  00000000  00000000  00015dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000f10  00000000  00000000  00016b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000280  00000000  00000000  00017a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000208  00000000  00000000  00017cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002e4e  00000000  00000000  00017ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002f24  00000000  00000000  0001ad16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0001420b  00000000  00000000  0001dc3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00031e45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007cc  00000000  00000000  00031ec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800081c 	.word	0x0800081c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800081c 	.word	0x0800081c

08000170 <HardFault_Handler>:
 */

#include "CortexMX_OS_porting.h"

void HardFault_Handler()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <MemManage_Handler>:
void MemManage_Handler()
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0

}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <BusFault_Handler>:
void BusFault_Handler()
{
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <UsageFault_Handler>:
void UsageFault_Handler()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0

}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <PendSV_Handler>:

void PendSV_Handler()
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVCLR_Msk;
 80001a4:	4b04      	ldr	r3, [pc, #16]	; (80001b8 <PendSV_Handler+0x18>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4a03      	ldr	r2, [pc, #12]	; (80001b8 <PendSV_Handler+0x18>)
 80001aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80001ae:	6053      	str	r3, [r2, #4]
}
 80001b0:	bf00      	nop
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr
 80001b8:	e000ed00 	.word	0xe000ed00

080001bc <SVC_Handler>:


__attribute ((naked))void SVC_Handler()
{
	__asm("tst lr, #4 \n\t"
 80001bc:	f01e 0f04 	tst.w	lr, #4
 80001c0:	bf0c      	ite	eq
 80001c2:	f3ef 8008 	mrseq	r0, MSP
 80001c6:	f3ef 8009 	mrsne	r0, PSP
 80001ca:	f000 b829 	b.w	8000220 <OS_SVC_services>
		  "ITE EQ \n\t"
		  "mrseq r0,MSP \n\t"
		  "mrsne r0,PSP \n\t"
		  "B OS_SVC_services");
}
 80001ce:	bf00      	nop

080001d0 <Hardware_init>:

void Hardware_init()
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0

	// 8 MHZ
	// 1 count -> 0.125 us
	// X count -> 1 ms
	// X = 8000 count
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr

080001dc <FIFO_init>:
 */


#include"MYRTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	60f8      	str	r0, [r7, #12]
 80001e4:	60b9      	str	r1, [r7, #8]
 80001e6:	607a      	str	r2, [r7, #4]

	if(!buff )
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d101      	bne.n	80001f2 <FIFO_init+0x16>
		return FIFO_NULL;
 80001ee:	2303      	movs	r3, #3
 80001f0:	e011      	b.n	8000216 <FIFO_init+0x3a>

	fifo->base = buff ;
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	68ba      	ldr	r2, [r7, #8]
 80001f6:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	68da      	ldr	r2, [r3, #12]
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	68da      	ldr	r2, [r3, #12]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 8000214:	2300      	movs	r3, #0

}
 8000216:	4618      	mov	r0, r3
 8000218:	3714      	adds	r7, #20
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <OS_SVC_services>:
	Task_ref* Next_Task;
	OS_Modes OSModes;
}OS_Control;

void OS_SVC_services(int *StackFramePointer)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	unsigned char SVC_number;
	SVC_number = *( (unsigned char*) ( (unsigned char*)StackFramePointer[6] )-2 ) ;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3318      	adds	r3, #24
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	3b02      	subs	r3, #2
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	73fb      	strb	r3, [r7, #15]
	switch(SVC_number)
 8000234:	7bfb      	ldrb	r3, [r7, #15]
 8000236:	2b02      	cmp	r3, #2
 8000238:	d003      	beq.n	8000242 <OS_SVC_services+0x22>
 800023a:	2b03      	cmp	r3, #3
 800023c:	d003      	beq.n	8000246 <OS_SVC_services+0x26>
 800023e:	2b01      	cmp	r3, #1
	{
	case 1:
		break;
 8000240:	e002      	b.n	8000248 <OS_SVC_services+0x28>
	case 2:
		break;
 8000242:	bf00      	nop
 8000244:	e000      	b.n	8000248 <OS_SVC_services+0x28>
	case 3:
		break;
 8000246:	bf00      	nop
	}
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr

08000252 <Idle_Task>:
	return result;

}

void Idle_Task()
{
 8000252:	b480      	push	{r7}
 8000254:	af00      	add	r7, sp, #0
	while(1)
	{
		__asm("NOP");
 8000256:	bf00      	nop
 8000258:	e7fd      	b.n	8000256 <Idle_Task+0x4>
	...

0800025c <RTOS_Create_MainStack>:
	}
}

RTOS_errorID RTOS_Create_MainStack()
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
	RTOS_errorID error = NOError;
 8000262:	2300      	movs	r3, #0
 8000264:	71fb      	strb	r3, [r7, #7]

	// 3 KiloByte for MSP
	OS_Control._S_MSP = &_estack ;
 8000266:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <RTOS_Create_MainStack+0x3c>)
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <RTOS_Create_MainStack+0x40>)
 800026a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP = OS_Control._S_MSP - MainStackSize;
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <RTOS_Create_MainStack+0x40>)
 8000270:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000274:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000278:	4a08      	ldr	r2, [pc, #32]	; (800029c <RTOS_Create_MainStack+0x40>)
 800027a:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_Control.PSP_TaskLocator = (OS_Control._E_MSP - 8);
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <RTOS_Create_MainStack+0x40>)
 8000280:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000284:	3b08      	subs	r3, #8
 8000286:	4a05      	ldr	r2, [pc, #20]	; (800029c <RTOS_Create_MainStack+0x40>)
 8000288:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	return error;
 800028c:	79fb      	ldrb	r3, [r7, #7]

}
 800028e:	4618      	mov	r0, r3
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	20002800 	.word	0x20002800
 800029c:	20000028 	.word	0x20000028

080002a0 <RTOS_init>:

RTOS_errorID RTOS_init()
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
	RTOS_errorID error = NOError;
 80002a6:	2300      	movs	r3, #0
 80002a8:	71fb      	strb	r3, [r7, #7]

	//Update OS mode
	OS_Control.OSModes = OSSuspended;
 80002aa:	4b17      	ldr	r3, [pc, #92]	; (8000308 <RTOS_init+0x68>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the MAIN stack for OS
	RTOS_Create_MainStack();
 80002b2:	f7ff ffd3 	bl	800025c <RTOS_Create_MainStack>

	//Create OS ready Queue
	if (FIFO_init(&Ready_QUEUE, Ready_QUEUE_FIFO, 100) !=FIFO_NO_ERROR)
 80002b6:	2264      	movs	r2, #100	; 0x64
 80002b8:	4914      	ldr	r1, [pc, #80]	; (800030c <RTOS_init+0x6c>)
 80002ba:	4815      	ldr	r0, [pc, #84]	; (8000310 <RTOS_init+0x70>)
 80002bc:	f7ff ff8e 	bl	80001dc <FIFO_init>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d002      	beq.n	80002cc <RTOS_init+0x2c>
	{
		error += Ready_Queue_init_error ;
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	3301      	adds	r3, #1
 80002ca:	71fb      	strb	r3, [r7, #7]
	}

	//Configure IDLE TASK
	strcpy(RTOS_IdleTask.Task_name, "idleTask");
 80002cc:	4a11      	ldr	r2, [pc, #68]	; (8000314 <RTOS_init+0x74>)
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <RTOS_init+0x78>)
 80002d0:	cb03      	ldmia	r3!, {r0, r1}
 80002d2:	6010      	str	r0, [r2, #0]
 80002d4:	6051      	str	r1, [r2, #4]
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	7213      	strb	r3, [r2, #8]
	RTOS_IdleTask.Priority = 255;                	//lowest Priority (unsigned char -> 255)
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <RTOS_init+0x7c>)
 80002dc:	22ff      	movs	r2, #255	; 0xff
 80002de:	711a      	strb	r2, [r3, #4]
	RTOS_IdleTask.P_TaskEntery = Idle_Task;
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <RTOS_init+0x7c>)
 80002e2:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <RTOS_init+0x80>)
 80002e4:	609a      	str	r2, [r3, #8]
	RTOS_IdleTask.Stack_Size = 300;
 80002e6:	4b0d      	ldr	r3, [pc, #52]	; (800031c <RTOS_init+0x7c>)
 80002e8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002ec:	601a      	str	r2, [r3, #0]

	error += RTOS_CreateTask(&RTOS_IdleTask);
 80002ee:	480b      	ldr	r0, [pc, #44]	; (800031c <RTOS_init+0x7c>)
 80002f0:	f000 f85a 	bl	80003a8 <RTOS_CreateTask>
 80002f4:	4603      	mov	r3, r0
 80002f6:	461a      	mov	r2, r3
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	4413      	add	r3, r2
 80002fc:	71fb      	strb	r3, [r7, #7]

	return error;
 80002fe:	79fb      	ldrb	r3, [r7, #7]
}
 8000300:	4618      	mov	r0, r3
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000028 	.word	0x20000028
 800030c:	20000228 	.word	0x20000228
 8000310:	200001d4 	.word	0x200001d4
 8000314:	20000201 	.word	0x20000201
 8000318:	08000834 	.word	0x08000834
 800031c:	200001e8 	.word	0x200001e8
 8000320:	08000253 	.word	0x08000253

08000324 <RTOS_Create_TaskStack>:

RTOS_errorID RTOS_Create_TaskStack(Task_ref* T_ref)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	RTOS_errorID error = NOError;
 800032c:	2300      	movs	r3, #0
 800032e:	72fb      	strb	r3, [r7, #11]
	 * r0
	 *====
	 *r5, r6 , r7 ,r8 ,r9, r10,r11 (Saved/Restore)Manual
	 */

	T_ref->Current_PSP = T_ref->_S_PSP_Task;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	461a      	mov	r2, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	615a      	str	r2, [r3, #20]

	//DUMMY_XPSR should T =1
	T_ref->Current_PSP--;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	1f1a      	subs	r2, r3, #4
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	615a      	str	r2, [r3, #20]
	*(T_ref->Current_PSP) = 0x1000000;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800034c:	601a      	str	r2, [r3, #0]

	//PC
	T_ref->Current_PSP--;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	1f1a      	subs	r2, r3, #4
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	615a      	str	r2, [r3, #20]
	*(T_ref->Current_PSP) =  (unsigned int)T_ref->P_TaskEntery;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	689a      	ldr	r2, [r3, #8]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	601a      	str	r2, [r3, #0]

	//LR
	T_ref->Current_PSP--;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	1f1a      	subs	r2, r3, #4
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	615a      	str	r2, [r3, #20]
	//LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
	*(T_ref->Current_PSP) = 0xFFFFFFFD;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f06f 0202 	mvn.w	r2, #2
 8000374:	601a      	str	r2, [r3, #0]

	int i;
	for(i=0 ; i<13 ; i++ )
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	e00b      	b.n	8000394 <RTOS_Create_TaskStack+0x70>
	{
		//rx
		T_ref->Current_PSP--;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	1f1a      	subs	r2, r3, #4
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	615a      	str	r2, [r3, #20]
		*(T_ref->Current_PSP) = 0;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
	for(i=0 ; i<13 ; i++ )
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	3301      	adds	r3, #1
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	2b0c      	cmp	r3, #12
 8000398:	ddf0      	ble.n	800037c <RTOS_Create_TaskStack+0x58>
	}

	return error;
 800039a:	7afb      	ldrb	r3, [r7, #11]
}
 800039c:	4618      	mov	r0, r3
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr
	...

080003a8 <RTOS_CreateTask>:

RTOS_errorID RTOS_CreateTask(Task_ref* T_ref)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	RTOS_errorID error = NOError;
 80003b0:	2300      	movs	r3, #0
 80003b2:	73fb      	strb	r3, [r7, #15]

	//create Its own PSP stack
	//check task stack size exceeded the PSP stack
	T_ref->_S_PSP_Task =  OS_Control.PSP_TaskLocator;
 80003b4:	4b16      	ldr	r3, [pc, #88]	; (8000410 <RTOS_CreateTask+0x68>)
 80003b6:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	60da      	str	r2, [r3, #12]
	T_ref->_E_PSP_Task = ( OS_Control.PSP_TaskLocator - T_ref->Stack_Size );
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <RTOS_CreateTask+0x68>)
 80003c0:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	1ad2      	subs	r2, r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	611a      	str	r2, [r3, #16]
	{
		//return Task_exceeded_StackSize;
	}

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_TaskLocator =  (T_ref->_E_PSP_Task - 8);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	691b      	ldr	r3, [r3, #16]
 80003d2:	3b08      	subs	r3, #8
 80003d4:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <RTOS_CreateTask+0x68>)
 80003d6:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	RTOS_Create_TaskStack(T_ref);
 80003da:	6878      	ldr	r0, [r7, #4]
 80003dc:	f7ff ffa2 	bl	8000324 <RTOS_Create_TaskStack>

	//update sch Table
	OS_Control.OS_Tasks[OS_Control.NumberOfCreatedTask] = T_ref;
 80003e0:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <RTOS_CreateTask+0x68>)
 80003e2:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80003e6:	4619      	mov	r1, r3
 80003e8:	4a09      	ldr	r2, [pc, #36]	; (8000410 <RTOS_CreateTask+0x68>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	OS_Control.NumberOfCreatedTask++;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <RTOS_CreateTask+0x68>)
 80003f2:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80003f6:	3301      	adds	r3, #1
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <RTOS_CreateTask+0x68>)
 80003fc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	//Task state Update suspend
	T_ref->Task_State = Suspended;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2200      	movs	r2, #0
 8000404:	761a      	strb	r2, [r3, #24]

	return error;
 8000406:	7bfb      	ldrb	r3, [r7, #15]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000028 	.word	0x20000028

08000414 <Task1>:
#include "Scheduler.h"

Task_ref T1, T2, T3;

void Task1()
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	while(1)
 8000418:	e7fe      	b.n	8000418 <Task1+0x4>

0800041a <Task2>:

	}
}

void Task2()
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0
	while(1)
 800041e:	e7fe      	b.n	800041e <Task2+0x4>

08000420 <Task3>:

	}
}

void Task3()
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	while(1)
 8000424:	e7fe      	b.n	8000424 <Task3+0x4>
	...

08000428 <main>:

	}
}

int main(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	RTOS_errorID error;
	Hardware_init();
 800042c:	f7ff fed0 	bl	80001d0 <Hardware_init>
	RTOS_init();
 8000430:	f7ff ff36 	bl	80002a0 <RTOS_init>

	T1.Stack_Size = 1024;
 8000434:	4b21      	ldr	r3, [pc, #132]	; (80004bc <main+0x94>)
 8000436:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800043a:	601a      	str	r2, [r3, #0]
	T1.P_TaskEntery = Task1;
 800043c:	4b1f      	ldr	r3, [pc, #124]	; (80004bc <main+0x94>)
 800043e:	4a20      	ldr	r2, [pc, #128]	; (80004c0 <main+0x98>)
 8000440:	609a      	str	r2, [r3, #8]
	T1.Priority = 3;
 8000442:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <main+0x94>)
 8000444:	2203      	movs	r2, #3
 8000446:	711a      	strb	r2, [r3, #4]
	T1.Task_State = Suspended;
 8000448:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <main+0x94>)
 800044a:	2200      	movs	r2, #0
 800044c:	761a      	strb	r2, [r3, #24]
	strcpy(T1.Task_name,"task1");
 800044e:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <main+0x9c>)
 8000450:	4a1d      	ldr	r2, [pc, #116]	; (80004c8 <main+0xa0>)
 8000452:	6810      	ldr	r0, [r2, #0]
 8000454:	6018      	str	r0, [r3, #0]
 8000456:	8892      	ldrh	r2, [r2, #4]
 8000458:	809a      	strh	r2, [r3, #4]
	RTOS_CreateTask(&T1);
 800045a:	4818      	ldr	r0, [pc, #96]	; (80004bc <main+0x94>)
 800045c:	f7ff ffa4 	bl	80003a8 <RTOS_CreateTask>

	T2.Stack_Size = 1024;
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <main+0xa4>)
 8000462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000466:	601a      	str	r2, [r3, #0]
	T2.P_TaskEntery = Task2;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <main+0xa4>)
 800046a:	4a19      	ldr	r2, [pc, #100]	; (80004d0 <main+0xa8>)
 800046c:	609a      	str	r2, [r3, #8]
	T2.Priority = 4;
 800046e:	4b17      	ldr	r3, [pc, #92]	; (80004cc <main+0xa4>)
 8000470:	2204      	movs	r2, #4
 8000472:	711a      	strb	r2, [r3, #4]
	T2.Task_State = Suspended;
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <main+0xa4>)
 8000476:	2200      	movs	r2, #0
 8000478:	761a      	strb	r2, [r3, #24]
	strcpy(T2.Task_name,"task2");
 800047a:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <main+0xac>)
 800047c:	4a16      	ldr	r2, [pc, #88]	; (80004d8 <main+0xb0>)
 800047e:	6810      	ldr	r0, [r2, #0]
 8000480:	6018      	str	r0, [r3, #0]
 8000482:	8892      	ldrh	r2, [r2, #4]
 8000484:	809a      	strh	r2, [r3, #4]
	RTOS_CreateTask(&T2);
 8000486:	4811      	ldr	r0, [pc, #68]	; (80004cc <main+0xa4>)
 8000488:	f7ff ff8e 	bl	80003a8 <RTOS_CreateTask>

	T3.Stack_Size = 1024;
 800048c:	4b13      	ldr	r3, [pc, #76]	; (80004dc <main+0xb4>)
 800048e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000492:	601a      	str	r2, [r3, #0]
	T3.P_TaskEntery = Task3;
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <main+0xb4>)
 8000496:	4a12      	ldr	r2, [pc, #72]	; (80004e0 <main+0xb8>)
 8000498:	609a      	str	r2, [r3, #8]
	T3.Priority = 5;
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <main+0xb4>)
 800049c:	2205      	movs	r2, #5
 800049e:	711a      	strb	r2, [r3, #4]
	T3.Task_State = Suspended;
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <main+0xb4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	761a      	strb	r2, [r3, #24]
	strcpy(T3.Task_name,"task3");
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <main+0xbc>)
 80004a8:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <main+0xc0>)
 80004aa:	6810      	ldr	r0, [r2, #0]
 80004ac:	6018      	str	r0, [r3, #0]
 80004ae:	8892      	ldrh	r2, [r2, #4]
 80004b0:	809a      	strh	r2, [r3, #4]
	RTOS_CreateTask(&T3);
 80004b2:	480a      	ldr	r0, [pc, #40]	; (80004dc <main+0xb4>)
 80004b4:	f7ff ff78 	bl	80003a8 <RTOS_CreateTask>


	while(1)
 80004b8:	e7fe      	b.n	80004b8 <main+0x90>
 80004ba:	bf00      	nop
 80004bc:	20000438 	.word	0x20000438
 80004c0:	08000415 	.word	0x08000415
 80004c4:	20000451 	.word	0x20000451
 80004c8:	08000840 	.word	0x08000840
 80004cc:	200003b8 	.word	0x200003b8
 80004d0:	0800041b 	.word	0x0800041b
 80004d4:	200003d1 	.word	0x200003d1
 80004d8:	08000848 	.word	0x08000848
 80004dc:	200003f8 	.word	0x200003f8
 80004e0:	08000421 	.word	0x08000421
 80004e4:	20000411 	.word	0x20000411
 80004e8:	08000850 	.word	0x08000850

080004ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f6:	490d      	ldr	r1, [pc, #52]	; (800052c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <LoopForever+0xe>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800050c:	4c0a      	ldr	r4, [pc, #40]	; (8000538 <LoopForever+0x16>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800051a:	f000 f95b 	bl	80007d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051e:	f7ff ff83 	bl	8000428 <main>

08000522 <LoopForever>:

LoopForever:
    b LoopForever
 8000522:	e7fe      	b.n	8000522 <LoopForever>
  ldr   r0, =_estack
 8000524:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000530:	08000860 	.word	0x08000860
  ldr r2, =_sbss
 8000534:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000538:	200004b4 	.word	0x200004b4

0800053c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC1_2_IRQHandler>
	...

08000540 <EXTI0_IRQHandler>:
*================================================================
*                          ISR functions
*================================================================
*/
void EXTI0_IRQHandler (void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <EXTI0_IRQHandler+0x1c>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <EXTI0_IRQHandler+0x1c>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[0]();
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <EXTI0_IRQHandler+0x20>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4798      	blx	r3
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40010400 	.word	0x40010400
 8000560:	20000478 	.word	0x20000478

08000564 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<1;
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <EXTI1_IRQHandler+0x1c>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <EXTI1_IRQHandler+0x1c>)
 800056e:	f043 0302 	orr.w	r3, r3, #2
 8000572:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[1]();
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <EXTI1_IRQHandler+0x20>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	4798      	blx	r3
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40010400 	.word	0x40010400
 8000584:	20000478 	.word	0x20000478

08000588 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<2;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <EXTI2_IRQHandler+0x1c>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <EXTI2_IRQHandler+0x1c>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[2]();
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <EXTI2_IRQHandler+0x20>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	4798      	blx	r3
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40010400 	.word	0x40010400
 80005a8:	20000478 	.word	0x20000478

080005ac <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<3;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <EXTI3_IRQHandler+0x1c>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <EXTI3_IRQHandler+0x1c>)
 80005b6:	f043 0308 	orr.w	r3, r3, #8
 80005ba:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[3]();
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <EXTI3_IRQHandler+0x20>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	4798      	blx	r3
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40010400 	.word	0x40010400
 80005cc:	20000478 	.word	0x20000478

080005d0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<4;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <EXTI4_IRQHandler+0x1c>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <EXTI4_IRQHandler+0x1c>)
 80005da:	f043 0310 	orr.w	r3, r3, #16
 80005de:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[4]();
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <EXTI4_IRQHandler+0x20>)
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	4798      	blx	r3
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40010400 	.word	0x40010400
 80005f0:	20000478 	.word	0x20000478

080005f4 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CALLBACK[5](); }
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f003 0320 	and.w	r3, r3, #32
 8000600:	2b00      	cmp	r3, #0
 8000602:	d008      	beq.n	8000616 <EXTI9_5_IRQHandler+0x22>
 8000604:	4b23      	ldr	r3, [pc, #140]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a22      	ldr	r2, [pc, #136]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b21      	ldr	r3, [pc, #132]	; (8000698 <EXTI9_5_IRQHandler+0xa4>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CALLBACK[6](); }
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800061e:	2b00      	cmp	r3, #0
 8000620:	d008      	beq.n	8000634 <EXTI9_5_IRQHandler+0x40>
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 8000628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <EXTI9_5_IRQHandler+0xa4>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CALLBACK[7](); }
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063c:	2b00      	cmp	r3, #0
 800063e:	d008      	beq.n	8000652 <EXTI9_5_IRQHandler+0x5e>
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 8000646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064a:	6153      	str	r3, [r2, #20]
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <EXTI9_5_IRQHandler+0xa4>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CALLBACK[8](); }
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800065a:	2b00      	cmp	r3, #0
 800065c:	d008      	beq.n	8000670 <EXTI9_5_IRQHandler+0x7c>
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 8000664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <EXTI9_5_IRQHandler+0xa4>)
 800066c:	6a1b      	ldr	r3, [r3, #32]
 800066e:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CALLBACK[9](); }
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000678:	2b00      	cmp	r3, #0
 800067a:	d008      	beq.n	800068e <EXTI9_5_IRQHandler+0x9a>
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <EXTI9_5_IRQHandler+0xa0>)
 8000682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000686:	6153      	str	r3, [r2, #20]
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <EXTI9_5_IRQHandler+0xa4>)
 800068a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068c:	4798      	blx	r3

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40010400 	.word	0x40010400
 8000698:	20000478 	.word	0x20000478

0800069c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CALLBACK[10](); }
 80006a0:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d008      	beq.n	80006be <EXTI15_10_IRQHandler+0x22>
 80006ac:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	4a29      	ldr	r2, [pc, #164]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 80006b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006b6:	6153      	str	r3, [r2, #20]
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <EXTI15_10_IRQHandler+0xc0>)
 80006ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006bc:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CALLBACK[11](); }
 80006be:	4b26      	ldr	r3, [pc, #152]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d008      	beq.n	80006dc <EXTI15_10_IRQHandler+0x40>
 80006ca:	4b23      	ldr	r3, [pc, #140]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a22      	ldr	r2, [pc, #136]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 80006d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <EXTI15_10_IRQHandler+0xc0>)
 80006d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006da:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CALLBACK[12](); }
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d008      	beq.n	80006fa <EXTI15_10_IRQHandler+0x5e>
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 80006ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006f2:	6153      	str	r3, [r2, #20]
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <EXTI15_10_IRQHandler+0xc0>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f8:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CALLBACK[13](); }
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000702:	2b00      	cmp	r3, #0
 8000704:	d008      	beq.n	8000718 <EXTI15_10_IRQHandler+0x7c>
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 800070c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <EXTI15_10_IRQHandler+0xc0>)
 8000714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000716:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CALLBACK[14](); }
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000720:	2b00      	cmp	r3, #0
 8000722:	d008      	beq.n	8000736 <EXTI15_10_IRQHandler+0x9a>
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6153      	str	r3, [r2, #20]
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <EXTI15_10_IRQHandler+0xc0>)
 8000732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000734:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CALLBACK[15](); }
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800073e:	2b00      	cmp	r3, #0
 8000740:	d008      	beq.n	8000754 <EXTI15_10_IRQHandler+0xb8>
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <EXTI15_10_IRQHandler+0xbc>)
 8000748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b03      	ldr	r3, [pc, #12]	; (800075c <EXTI15_10_IRQHandler+0xc0>)
 8000750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000752:	4798      	blx	r3

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40010400 	.word	0x40010400
 800075c:	20000478 	.word	0x20000478

08000760 <SPI1_IRQHandler>:
 *                         IRQ
 * ===========================================================
 */

void SPI1_IRQHandler (void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <SPI1_IRQHandler+0x18>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	7938      	ldrb	r0, [r7, #4]
 800076e:	4798      	blx	r3

}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000001c 	.word	0x2000001c

0800077c <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SPI2_IRQHandler+0x18>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	7938      	ldrb	r0, [r7, #4]
 800078a:	4798      	blx	r3
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000001c 	.word	0x2000001c

08000798 <USART1_IRQHandler>:
                itr++;
            }
}
//ISR
void USART1_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 800079c:	4b02      	ldr	r3, [pc, #8]	; (80007a8 <USART1_IRQHandler+0x10>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	691b      	ldr	r3, [r3, #16]
 80007a2:	4798      	blx	r3
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000024 	.word	0x20000024

080007ac <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 80007b0:	4b02      	ldr	r3, [pc, #8]	; (80007bc <USART2_IRQHandler+0x10>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	691b      	ldr	r3, [r3, #16]
 80007b6:	4798      	blx	r3
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000024 	.word	0x20000024

080007c0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 80007c4:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <USART3_IRQHandler+0x10>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	4798      	blx	r3
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000024 	.word	0x20000024

080007d4 <__libc_init_array>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	2500      	movs	r5, #0
 80007d8:	4e0c      	ldr	r6, [pc, #48]	; (800080c <__libc_init_array+0x38>)
 80007da:	4c0d      	ldr	r4, [pc, #52]	; (8000810 <__libc_init_array+0x3c>)
 80007dc:	1ba4      	subs	r4, r4, r6
 80007de:	10a4      	asrs	r4, r4, #2
 80007e0:	42a5      	cmp	r5, r4
 80007e2:	d109      	bne.n	80007f8 <__libc_init_array+0x24>
 80007e4:	f000 f81a 	bl	800081c <_init>
 80007e8:	2500      	movs	r5, #0
 80007ea:	4e0a      	ldr	r6, [pc, #40]	; (8000814 <__libc_init_array+0x40>)
 80007ec:	4c0a      	ldr	r4, [pc, #40]	; (8000818 <__libc_init_array+0x44>)
 80007ee:	1ba4      	subs	r4, r4, r6
 80007f0:	10a4      	asrs	r4, r4, #2
 80007f2:	42a5      	cmp	r5, r4
 80007f4:	d105      	bne.n	8000802 <__libc_init_array+0x2e>
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007fc:	4798      	blx	r3
 80007fe:	3501      	adds	r5, #1
 8000800:	e7ee      	b.n	80007e0 <__libc_init_array+0xc>
 8000802:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000806:	4798      	blx	r3
 8000808:	3501      	adds	r5, #1
 800080a:	e7f2      	b.n	80007f2 <__libc_init_array+0x1e>
 800080c:	08000858 	.word	0x08000858
 8000810:	08000858 	.word	0x08000858
 8000814:	08000858 	.word	0x08000858
 8000818:	0800085c 	.word	0x0800085c

0800081c <_init>:
 800081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800081e:	bf00      	nop
 8000820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000822:	bc08      	pop	{r3}
 8000824:	469e      	mov	lr, r3
 8000826:	4770      	bx	lr

08000828 <_fini>:
 8000828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082a:	bf00      	nop
 800082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800082e:	bc08      	pop	{r3}
 8000830:	469e      	mov	lr, r3
 8000832:	4770      	bx	lr
